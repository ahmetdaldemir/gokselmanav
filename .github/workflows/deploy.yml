name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Build and Deploy Frontend
      run: |
        cd frontend
        npm ci
        npm run build
        
    - name: Build and Deploy Backend
      run: |
        cd backend
        npm ci
        npm run build
        
    - name: Test SSH Connection
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: 185.209.228.189
        username: root
        password: '@198711Ad@'
        port: 22
        timeout: 30s
        command_timeout: 10s
        script: |
          echo "SSH connection successful!"
          echo "Current directory: $(pwd)"
          echo "Server uptime: $(uptime)"
          echo "Available disk space:"
          df -h
        
    - name: Setup Docker and PostgreSQL
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: 185.209.228.189
        username: root
        password: '@198711Ad@'
        port: 22
        timeout: 60s
        command_timeout: 30s
        script: |
          # Install Docker if not installed
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            systemctl enable docker
            systemctl start docker
          fi
          
          # Start Docker daemon if not running
          if ! systemctl is-active --quiet docker; then
            echo "Starting Docker daemon..."
            systemctl start docker
            sleep 5
          fi
          
          # Install Docker Compose if not installed
          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
          fi
          
          # Add root user to docker group
          usermod -aG docker root || true
          
          # Create application directory
          mkdir -p /var/www/html/gokselmanav
          cd /var/www/html/gokselmanav
          
          # Stop existing containers if running
          docker-compose -f docker-compose.prod.yml down || true
          
          # Test Docker is working
          docker --version
          docker-compose --version
          
    - name: Upload Docker Files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: 185.209.228.189
        username: root
        password: '@198711Ad@'
        port: 22
        timeout: 60s
        source: "docker-compose.prod.yml"
        target: "/var/www/html/gokselmanav/"
        
    - name: Upload PostgreSQL Files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: 185.209.228.189
        username: root
        password: '@198711Ad@'
        port: 22
        timeout: 60s
        source: "postgres/"
        target: "/var/www/html/gokselmanav/"
        
    - name: Start PostgreSQL with Docker
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: 185.209.228.189
        username: root
        password: '@198711Ad@'
        port: 22
        timeout: 120s
        command_timeout: 60s
        script: |
          cd /var/www/html/gokselmanav
          
          # Ensure Docker daemon is running
          systemctl start docker
          sleep 3
          
          # Clean up any existing containers and volumes
          docker-compose -f docker-compose.prod.yml down -v || true
          docker system prune -f || true
          
          # Start PostgreSQL containers
          echo "Starting PostgreSQL containers..."
          docker-compose -f docker-compose.prod.yml up -d postgres
          
          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to be ready..."
          sleep 45
          
          # Check container status
          echo "Container status:"
          docker-compose -f docker-compose.prod.yml ps
          
          # Check container logs
          echo "PostgreSQL container logs:"
          docker logs gokselmanav-postgres --tail 20
          
          # Test database connection
          echo "Testing database connection..."
          docker exec gokselmanav-postgres pg_isready -U gokselmanav_user -d gokselmanav_db || echo "Database not ready yet"
          
          # Start pgadmin after postgres is ready
          echo "Starting pgAdmin..."
          docker-compose -f docker-compose.prod.yml up -d pgadmin
          
          # Final status check
          echo "Final container status:"
          docker-compose -f docker-compose.prod.yml ps
          
    - name: Deploy to Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: 185.209.228.189
        username: root
        password: '@198711Ad@'
        port: 22
        timeout: 60s
        command_timeout: 30s
        script: |
          # Create directories if they don't exist
          mkdir -p /var/www/html/gokselmanav/frontend
          mkdir -p /var/www/html/gokselmanav/backend
          
          # Stop any running backend processes with PM2
          pm2 stop gokselmanav-backend || true
          pm2 delete gokselmanav-backend || true
          
          # Wait a moment for processes to stop
          sleep 2
          
    - name: Copy Package Files for Backend
      uses: appleboy/scp-action@v0.1.7
      with:
        host: 185.209.228.189
        username: root
        password: '@198711Ad@'
        port: 22
        timeout: 60s
        source: "backend/package*.json"
        target: "/tmp/"
        strip_components: 1
        
    - name: Upload Environment File
      uses: appleboy/scp-action@v0.1.7
      with:
        host: 185.209.228.189
        username: root
        password: '@198711Ad@'
        port: 22
        timeout: 60s
        source: "backend/env.example"
        target: "/var/www/html/gokselmanav/backend/.env"
        
    - name: Update Environment File
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: 185.209.228.189
        username: root
        password: '@198711Ad@'
        port: 22
        timeout: 30s
        command_timeout: 10s
        script: |
          cd /var/www/html/gokselmanav/backend
          
          # Update database host to use server IP for external access
          sed -i 's/DB_HOST=127.0.0.1/DB_HOST=185.209.228.189/' .env
          sed -i 's/DB_HOST=localhost/DB_HOST=185.209.228.189/' .env
          
          # Test database connection with new settings
          echo "Testing database connection with 185.209.228.189..."
          node -e "
          const { Client } = require('pg');
          const client = new Client({
            host: '185.209.228.189',
            port: 5432,
            database: 'gokselmanav_db',
            user: 'gokselmanav_user',
            password: 'gokselmanav_password_2024'
          });
          client.connect()
            .then(() => {
              console.log('✅ Database connection successful!');
              return client.query('SELECT version()');
            })
            .then(result => {
              console.log('✅ Database query successful:', result.rows[0].version);
            })
            .catch(err => console.error('❌ Connection error:', err))
            .finally(() => client.end());
          "
        
    - name: Upload Frontend Files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: 185.209.228.189
        username: root
        password: '@198711Ad@'
        port: 22
        timeout: 60s
        source: "frontend/dist/"
        target: "/tmp/frontend-dist/"
        strip_components: 1
        
    - name: Move Frontend Files from Temp to Target
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: 185.209.228.189
        username: root
        password: '@198711Ad@'
        port: 22
        timeout: 30s
        command_timeout: 15s
        script: |
          rm -rf /var/www/html/gokselmanav/frontend/*
          mv /tmp/frontend-dist/* /var/www/html/gokselmanav/frontend/
        
    - name: Upload Backend Files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: 185.209.228.189
        username: root
        password: '@198711Ad@'
        port: 22
        timeout: 60s
        source: "backend/dist/*"
        target: "/tmp/backend-dist/"
        strip_components: 1
        
    - name: Move Backend Files from Temp to Target
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: 185.209.228.189
        username: root
        password: '@198711Ad@'
        port: 22
        timeout: 30s
        command_timeout: 15s
        script: |
          rm -rf /var/www/html/gokselmanav/backend/*
          mv /tmp/backend-dist/* /var/www/html/gokselmanav/backend/
        
    - name: Install Backend Dependencies and Start with PM2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: 185.209.228.189
        username: root
        password: '@198711Ad@'
        port: 22
        timeout: 60s
        command_timeout: 30s
        script: |
          cd /var/www/html/gokselmanav/backend
          
          # Copy package.json and package-lock.json if they exist
          if [ -f "/tmp/package.json" ]; then
            cp /tmp/package.json package.json
          fi
          if [ -f "/tmp/package-lock.json" ]; then
            cp /tmp/package-lock.json package-lock.json
          fi
          
          # Install production dependencies
          npm ci --only=production
          
          # Start the backend application with PM2
          pm2 start main.js --name "gokselmanav-backend" --log /var/www/html/gokselmanav/backend/app.log
          
          # Save PM2 configuration to start on reboot
          pm2 save
          
          echo "Deployment completed successfully!"
          echo "Frontend deployed to: /var/www/html/gokselmanav/frontend/"
          echo "Backend deployed to: /var/www/html/gokselmanav/backend/"
          echo "PostgreSQL running on 185.209.228.189:5432"
          echo "PgAdmin running on 185.209.228.189:8080"
          echo "Backend started with PM2:"
          pm2 status
          echo "Docker containers status:"
          docker-compose -f /var/www/html/gokselmanav/docker-compose.prod.yml ps 