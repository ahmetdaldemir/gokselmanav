{
    "sourceFile": "backend/src/customers/customers.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1748364167276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1748364167276,
            "name": "Commit-0",
            "content": "import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Customer } from './entities/customer.entity';\r\nimport { CreateCustomerDto } from './dto/create-customer.dto';\r\nimport { UpdateCustomerDto } from './dto/update-customer.dto';\r\nimport * as bcrypt from 'bcrypt';\r\n\r\n@Injectable()\r\nexport class CustomersService {\r\n  constructor(\r\n    @InjectRepository(Customer)\r\n    private customersRepository: Repository<Customer>,\r\n  ) {}\r\n\r\n  async create(createCustomerDto: CreateCustomerDto) {\r\n    const hashedPassword = await bcrypt.hash(createCustomerDto.password, 10);\r\n    const customer = this.customersRepository.create({\r\n      ...createCustomerDto,\r\n      password: hashedPassword,\r\n    });\r\n    return this.customersRepository.save(customer);\r\n  }\r\n\r\n  findAll() {\r\n    return this.customersRepository.find();\r\n  }\r\n\r\n  findOne(id: number) {\r\n    return this.customersRepository.findOneBy({ id });\r\n  }\r\n\r\n  findByEmail(email: string) {\r\n    return this.customersRepository.findOneBy({ email });\r\n  }\r\n\r\n  async update(id: number, updateCustomerDto: UpdateCustomerDto) {\r\n    await this.customersRepository.update(id, updateCustomerDto);\r\n    return this.findOne(id);\r\n  }\r\n\r\n  async remove(id: number) {\r\n    const customer = await this.findOne(id);\r\n    if (customer) {\r\n      return this.customersRepository.remove(customer);\r\n    }\r\n    return null;\r\n  }\r\n} "
        }
    ]
}