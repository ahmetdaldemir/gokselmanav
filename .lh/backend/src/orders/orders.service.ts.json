{
    "sourceFile": "backend/src/orders/orders.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750682881191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750682881191,
            "name": "Commit-0",
            "content": "import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Order, OrderItem } from './entities/order.entity';\r\nimport { CreateOrderDto } from './dto/create-order.dto';\r\nimport { UpdateOrderDto } from './dto/update-order.dto';\r\nimport { ProductsService } from '../products/products.service';\r\nimport { CustomersService } from '../customers/customers.service';\r\n\r\n@Injectable()\r\nexport class OrdersService {\r\n  constructor(\r\n    @InjectRepository(Order)\r\n    private readonly orderRepository: Repository<Order>,\r\n    @InjectRepository(OrderItem)\r\n    private readonly orderItemRepository: Repository<OrderItem>,\r\n    private readonly productsService: ProductsService,\r\n    private readonly customersService: CustomersService,\r\n  ) {}\r\n\r\n  async create(createOrderDto: CreateOrderDto): Promise<Order> {\r\n    const { customerId, items, ...orderData } = createOrderDto;\r\n\r\n    // Verify customer exists\r\n    const customer = await this.customersService.findOne(customerId);\r\n    if (!customer) {\r\n      throw new NotFoundException(`Customer with ID ${customerId} not found`);\r\n    }\r\n\r\n    // Create order items\r\n    const orderItems: OrderItem[] = [];\r\n    for (const item of items) {\r\n      const product = await this.productsService.findOne(item.productId);\r\n      if (!product) {\r\n        throw new NotFoundException(`Product with ID ${item.productId} not found`);\r\n      }\r\n      const orderItem = this.orderItemRepository.create({\r\n        product,\r\n        quantity: item.quantity,\r\n        price: product.price,\r\n      });\r\n      orderItems.push(orderItem);\r\n    }\r\n\r\n    const order = this.orderRepository.create({\r\n      ...orderData,\r\n      customer,\r\n      customerId,\r\n      orderItems,\r\n      totalAmount: createOrderDto.totalAmount, // Use total from DTO\r\n    });\r\n\r\n    const savedOrder = await this.orderRepository.save(order);\r\n\r\n    // After saving the order, associate orderItems with it\r\n    for (const orderItem of orderItems) {\r\n      orderItem.order = savedOrder;\r\n      await this.orderItemRepository.save(orderItem);\r\n    }\r\n\r\n    return savedOrder;\r\n  }\r\n\r\n  async findAll(): Promise<Order[]> {\r\n    return this.orderRepository.find({\r\n      relations: ['customer', 'orderItems', 'orderItems.product'],\r\n    });\r\n  }\r\n\r\n  async findOne(id: number): Promise<Order> {\r\n    const order = await this.orderRepository.findOne({\r\n      where: { id },\r\n      relations: ['customer', 'orderItems', 'orderItems.product'],\r\n    });\r\n\r\n    if (!order) {\r\n      throw new NotFoundException(`Order with ID ${id} not found`);\r\n    }\r\n\r\n    return order;\r\n  }\r\n\r\n  async update(id: number, updateOrderDto: UpdateOrderDto): Promise<Order> {\r\n    const order = await this.findOne(id);\r\n    const { items, ...orderData } = updateOrderDto;\r\n\r\n    if (items) {\r\n      // Remove existing items\r\n      await this.orderItemRepository.remove(order.orderItems);\r\n\r\n      // Create new items\r\n      let totalAmount = 0;\r\n      const orderItems: OrderItem[] = [];\r\n\r\n      for (const item of items) {\r\n        const product = await this.productsService.findOne(item.productId);\r\n        if (!product) {\r\n          throw new NotFoundException(`Product with ID ${item.productId} not found`);\r\n        }\r\n\r\n        const orderItem = this.orderItemRepository.create({\r\n          product,\r\n          quantity: item.quantity,\r\n          price: product.price,\r\n        });\r\n\r\n        totalAmount += orderItem.price * orderItem.quantity;\r\n        orderItems.push(orderItem);\r\n      }\r\n\r\n      order.orderItems = orderItems;\r\n      order.totalAmount = totalAmount;\r\n    }\r\n\r\n    Object.assign(order, orderData);\r\n    return this.orderRepository.save(order);\r\n  }\r\n\r\n  async remove(id: number): Promise<void> {\r\n    const order = await this.findOne(id);\r\n    await this.orderRepository.remove(order);\r\n  }\r\n} "
        }
    ]
}