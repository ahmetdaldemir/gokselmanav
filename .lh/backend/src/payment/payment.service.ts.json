{
    "sourceFile": "backend/src/payment/payment.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1748706988276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748707828145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,104 @@\n-import { Injectable, Inject, forwardRef } from '@nestjs/common';\r\n+import { Injectable, Inject, forwardRef, BadRequestException } from '@nestjs/common';\r\n import { OrdersService } from '../orders/orders.service';\r\n import { CreateOrderDto } from '../orders/dto/create-order.dto';\r\n+import axios from 'axios';\r\n \r\n @Injectable()\r\n export class PaymentService {\r\n   constructor(\r\n     @Inject(forwardRef(() => OrdersService))\r\n     private readonly ordersService: OrdersService,\r\n   ) {}\r\n \r\n-  async processPayment(paymentData: any): Promise<{ success: boolean; message: string; order?: any }> {\r\n-    // 1. Ödeme işlemini simüle et (örneğin her zaman başarılı kabul edelim)\r\n-    const paymentSuccess = true; // burada gerçek banka entegrasyonu olacak\r\n-\r\n-    if (paymentSuccess) {\r\n+  async processPayment(paymentData: any): Promise<{ success: boolean; message: string; order?: any; data?: any }> {\r\n+    // 1. Ödeme işlemini banka ile simüle et\r\n+    const paymentResult = await this.processFinansbankPayment(paymentData);\r\n+    if (paymentResult.status) {\r\n       // 2. Siparişi kaydet\r\n       const orderDto: CreateOrderDto = paymentData.orderDetails;\r\n       const order = await this.ordersService.create(orderDto);\r\n-      return { success: true, message: 'Ödeme başarılı, sipariş oluşturuldu', order };\r\n+      return { success: true, message: 'Ödeme başarılı, sipariş oluşturuldu', order, data: paymentResult.data };\r\n     } else {\r\n-      return { success: false, message: 'Ödeme başarısız' };\r\n+      return { success: false, message: paymentResult.message, data: paymentResult.data };\r\n     }\r\n   }\r\n+\r\n+  private async processFinansbankPayment(paymentData: any): Promise<{ status: boolean; message: string; data: any }> {\r\n+    try {\r\n+      // Şimdilik merchant bilgileri boş\r\n+      const MbrId = '';\r\n+      const MerchantID = '';\r\n+      const UserCode = '';\r\n+      const UserPass = '';\r\n+      const OrderId = `ORDER_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n+      const SecureType = 'NonSecure';\r\n+      const TxnType = 'Auth';\r\n+      const PurchAmount = paymentData.amount?.toFixed(2) || '0.00';\r\n+      const Currency = '949';\r\n+      const Lang = 'TR';\r\n+      const MOTO = '0';\r\n+\r\n+      const data = new URLSearchParams({\r\n+        MbrId,\r\n+        MerchantID,\r\n+        UserCode,\r\n+        UserPass,\r\n+        OrderId,\r\n+        SecureType,\r\n+        TxnType,\r\n+        PurchAmount,\r\n+        Currency,\r\n+        Pan: paymentData.cardNumber,\r\n+        Expiry: `${paymentData.expiryMonth}${paymentData.expiryYear?.slice(-2)}`,\r\n+        Cvv2: paymentData.cvv,\r\n+        MOTO,\r\n+        Lang,\r\n+      }).toString();\r\n+\r\n+      const response = await axios.post(\r\n+        'https://vpostest.qnb.com.tr/Gateway/Default.aspx',\r\n+        data,\r\n+        {\r\n+          headers: {\r\n+            'Content-Type': 'application/x-www-form-urlencoded',\r\n+          },\r\n+        },\r\n+      );\r\n+\r\n+      const resultValues = response.data.split(';;');\r\n+      const result = resultValues.reduce((acc: Record<string, string>, value: string) => {\r\n+        const [key, val] = value.split('=');\r\n+        if (key && val) {\r\n+          acc[key] = val;\r\n+        }\r\n+        return acc;\r\n+      }, {});\r\n+\r\n+      if (result.ProcReturnCode === '00') {\r\n+        return {\r\n+          status: true,\r\n+          message: 'Payment successful',\r\n+          data: {\r\n+            orderId: OrderId,\r\n+            transactionId: result.TransId,\r\n+            amount: PurchAmount,\r\n+          },\r\n+        };\r\n+      }\r\n+\r\n+      return {\r\n+        status: false,\r\n+        message: result.ErrMsg || 'Payment failed',\r\n+        data: {\r\n+          orderId: OrderId,\r\n+          errorCode: result.ProcReturnCode,\r\n+          errorMessage: result.ErrMsg,\r\n+        },\r\n+      };\r\n+    } catch (error) {\r\n+      throw new BadRequestException(\r\n+        'Payment failed: ' + (error instanceof Error ? error.message : 'Unknown error'),\r\n+      );\r\n+    }\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1748783007080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,13 +24,12 @@\n   }\r\n \r\n   private async processFinansbankPayment(paymentData: any): Promise<{ status: boolean; message: string; data: any }> {\r\n     try {\r\n-      // Şimdilik merchant bilgileri boş\r\n-      const MbrId = '';\r\n-      const MerchantID = '';\r\n-      const UserCode = '';\r\n-      const UserPass = '';\r\n+      const MbrId = '5';\r\n+      const MerchantID = '087800000026740';\r\n+      const UserCode = 'ohbturadmin1';\r\n+      const UserPass = '312935';\r\n       const OrderId = `ORDER_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n       const SecureType = 'NonSecure';\r\n       const TxnType = 'Auth';\r\n       const PurchAmount = paymentData.amount?.toFixed(2) || '0.00';\r\n"
                },
                {
                    "date": 1748783104675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,17 @@\n       const Currency = '949';\r\n       const Lang = 'TR';\r\n       const MOTO = '0';\r\n \r\n+      // Expiry bilgisini ayır\r\n+      let expiryMonth = '';\r\n+      let expiryYear = '';\r\n+      if (paymentData.expiry) {\r\n+        const [month, year] = paymentData.expiry.split('/');\r\n+        expiryMonth = month;\r\n+        expiryYear = year;\r\n+      }\r\n+\r\n       const data = new URLSearchParams({\r\n         MbrId,\r\n         MerchantID,\r\n         UserCode,\r\n@@ -47,9 +56,9 @@\n         TxnType,\r\n         PurchAmount,\r\n         Currency,\r\n         Pan: paymentData.cardNumber,\r\n-        Expiry: `${paymentData.expiryMonth}${paymentData.expiryYear?.slice(-2)}`,\r\n+        Expiry: `${expiryMonth}${expiryYear?.slice(-2)}`,\r\n         Cvv2: paymentData.cvv,\r\n         MOTO,\r\n         Lang,\r\n       }).toString();\r\n"
                },
                {
                    "date": 1748783282088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,22 +9,10 @@\n     @Inject(forwardRef(() => OrdersService))\r\n     private readonly ordersService: OrdersService,\r\n   ) {}\r\n \r\n-  async processPayment(paymentData: any): Promise<{ success: boolean; message: string; order?: any; data?: any }> {\r\n-    // 1. Ödeme işlemini banka ile simüle et\r\n-    const paymentResult = await this.processFinansbankPayment(paymentData);\r\n-    if (paymentResult.status) {\r\n-      // 2. Siparişi kaydet\r\n-      const orderDto: CreateOrderDto = paymentData.orderDetails;\r\n-      const order = await this.ordersService.create(orderDto);\r\n-      return { success: true, message: 'Ödeme başarılı, sipariş oluşturuldu', order, data: paymentResult.data };\r\n-    } else {\r\n-      return { success: false, message: paymentResult.message, data: paymentResult.data };\r\n-    }\r\n-  }\r\n \r\n-  private async processFinansbankPayment(paymentData: any): Promise<{ status: boolean; message: string; data: any }> {\r\n+  async processFinansbankPayment(paymentData: any): Promise<{ status: boolean; message: string; data: any }> {\r\n     try {\r\n       const MbrId = '5';\r\n       const MerchantID = '087800000026740';\r\n       const UserCode = 'ohbturadmin1';\r\n"
                },
                {
                    "date": 1748784038326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n \r\n \r\n   async processFinansbankPayment(paymentData: any): Promise<{ status: boolean; message: string; data: any }> {\r\n     try {\r\n+      console.log('Gelen ödeme verisi:', paymentData);\r\n       const MbrId = '5';\r\n       const MerchantID = '087800000026740';\r\n       const UserCode = 'ohbturadmin1';\r\n       const UserPass = '312935';\r\n@@ -50,8 +51,10 @@\n         MOTO,\r\n         Lang,\r\n       }).toString();\r\n \r\n+      console.log('Bankaya gönderilen veri:', data);\r\n+\r\n       const response = await axios.post(\r\n         'https://vpostest.qnb.com.tr/Gateway/Default.aspx',\r\n         data,\r\n         {\r\n@@ -60,8 +63,10 @@\n           },\r\n         },\r\n       );\r\n \r\n+      console.log('Bankadan dönen response:', response.data);\r\n+\r\n       const resultValues = response.data.split(';;');\r\n       const result = resultValues.reduce((acc: Record<string, string>, value: string) => {\r\n         const [key, val] = value.split('=');\r\n         if (key && val) {\r\n"
                },
                {
                    "date": 1748784409112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,12 +13,12 @@\n \r\n   async processFinansbankPayment(paymentData: any): Promise<{ status: boolean; message: string; data: any }> {\r\n     try {\r\n       console.log('Gelen ödeme verisi:', paymentData);\r\n-      const MbrId = '5';\r\n-      const MerchantID = '087800000026740';\r\n-      const UserCode = 'ohbturadmin1';\r\n-      const UserPass = '312935';\r\n+      const MbrId = '';\r\n+      const MerchantID = '';\r\n+      const UserCode = '';\r\n+      const UserPass = '';\r\n       const OrderId = `ORDER_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n       const SecureType = 'NonSecure';\r\n       const TxnType = 'Auth';\r\n       const PurchAmount = paymentData.amount?.toFixed(2) || '0.00';\r\n"
                }
            ],
            "date": 1748706988276,
            "name": "Commit-0",
            "content": "import { Injectable, Inject, forwardRef } from '@nestjs/common';\r\nimport { OrdersService } from '../orders/orders.service';\r\nimport { CreateOrderDto } from '../orders/dto/create-order.dto';\r\n\r\n@Injectable()\r\nexport class PaymentService {\r\n  constructor(\r\n    @Inject(forwardRef(() => OrdersService))\r\n    private readonly ordersService: OrdersService,\r\n  ) {}\r\n\r\n  async processPayment(paymentData: any): Promise<{ success: boolean; message: string; order?: any }> {\r\n    // 1. Ödeme işlemini simüle et (örneğin her zaman başarılı kabul edelim)\r\n    const paymentSuccess = true; // burada gerçek banka entegrasyonu olacak\r\n\r\n    if (paymentSuccess) {\r\n      // 2. Siparişi kaydet\r\n      const orderDto: CreateOrderDto = paymentData.orderDetails;\r\n      const order = await this.ordersService.create(orderDto);\r\n      return { success: true, message: 'Ödeme başarılı, sipariş oluşturuldu', order };\r\n    } else {\r\n      return { success: false, message: 'Ödeme başarısız' };\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}