{
    "sourceFile": "frontend/src/stores/auth.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1750614962093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750682932928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n   email: string\r\n   firstName: string\r\n   lastName: string\r\n   role: 'admin' | 'customer'\r\n+  address?: string\r\n }\r\n \r\n interface LoginResponse {\r\n   access_token: string\r\n"
                },
                {
                    "date": 1750683860824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,18 +26,16 @@\n     token.value = response.access_token\r\n     isAuthenticated.value = true\r\n     localStorage.setItem('token', response.access_token)\r\n     localStorage.setItem('user', JSON.stringify(response.user))\r\n-    axios.defaults.headers.common['Authorization'] = `Bearer ${response.access_token}`\r\n   }\r\n \r\n   const clearAuth = () => {\r\n     user.value = null\r\n     token.value = null\r\n     isAuthenticated.value = false\r\n     localStorage.removeItem('token')\r\n     localStorage.removeItem('user')\r\n-    delete axios.defaults.headers.common['Authorization']\r\n   }\r\n \r\n   const initAuth = () => {\r\n     const storedToken = localStorage.getItem('token')\r\n@@ -45,9 +43,8 @@\n     if (storedToken && storedUser) {\r\n       token.value = storedToken\r\n       user.value = JSON.parse(storedUser)\r\n       isAuthenticated.value = true\r\n-      axios.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`\r\n     }\r\n   }\r\n \r\n   const login = async (email: string, password: string, isAdmin: boolean = false) => {\r\n"
                }
            ],
            "date": 1750614962093,
            "name": "Commit-0",
            "content": "import { defineStore } from 'pinia'\r\nimport { ref } from 'vue'\r\nimport axios from 'axios'\r\n\r\ninterface User {\r\n  id: number\r\n  email: string\r\n  firstName: string\r\n  lastName: string\r\n  role: 'admin' | 'customer'\r\n}\r\n\r\ninterface LoginResponse {\r\n  access_token: string\r\n  user: User\r\n}\r\n\r\nexport const useAuthStore = defineStore('auth', () => {\r\n  const user = ref<User | null>(null)\r\n  const token = ref<string | null>(null)\r\n  const isAuthenticated = ref(false)\r\n\r\n  const setAuth = (response: LoginResponse) => {\r\n    user.value = response.user\r\n    token.value = response.access_token\r\n    isAuthenticated.value = true\r\n    localStorage.setItem('token', response.access_token)\r\n    localStorage.setItem('user', JSON.stringify(response.user))\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${response.access_token}`\r\n  }\r\n\r\n  const clearAuth = () => {\r\n    user.value = null\r\n    token.value = null\r\n    isAuthenticated.value = false\r\n    localStorage.removeItem('token')\r\n    localStorage.removeItem('user')\r\n    delete axios.defaults.headers.common['Authorization']\r\n  }\r\n\r\n  const initAuth = () => {\r\n    const storedToken = localStorage.getItem('token')\r\n    const storedUser = localStorage.getItem('user')\r\n    if (storedToken && storedUser) {\r\n      token.value = storedToken\r\n      user.value = JSON.parse(storedUser)\r\n      isAuthenticated.value = true\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`\r\n    }\r\n  }\r\n\r\n  const login = async (email: string, password: string, isAdmin: boolean = false) => {\r\n    try {\r\n      const response = await axios.post<LoginResponse>(\r\n        `/backend/auth/${isAdmin ? 'admin' : 'customer'}/login`,\r\n        { email, password }\r\n      )\r\n      setAuth(response.data)\r\n      return true\r\n    } catch (error) {\r\n      console.error('Login error:', error)\r\n      return false\r\n    }\r\n  }\r\n\r\n  const logout = () => {\r\n    clearAuth()\r\n  }\r\n\r\n  const updateUser = (updatedUser: User) => {\r\n    user.value = updatedUser\r\n    localStorage.setItem('user', JSON.stringify(updatedUser))\r\n  }\r\n\r\n  return {\r\n    user,\r\n    token,\r\n    isAuthenticated,\r\n    login,\r\n    logout,\r\n    initAuth,\r\n    updateUser\r\n  }\r\n}) "
        }
    ]
}