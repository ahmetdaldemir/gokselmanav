{
    "sourceFile": "frontend/src/views/CashoutView.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1750682418026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750682436722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,76 +88,133 @@\n   </div>\r\n </template>\r\n \r\n <script setup lang=\"ts\">\r\n-import { ref, computed } from 'vue'\r\n+import { ref, computed, onMounted } from 'vue'\r\n import { useCartStore } from '@/stores/cart'\r\n import { useAuthStore } from '@/stores/auth'\r\n+import { useRouter } from 'vue-router'\r\n+import axios from 'axios'\r\n+import { loadStripe } from '@stripe/stripe-js'\r\n \r\n-interface CartItem {\r\n-  id: number;\r\n-  name: string;\r\n-  price: number;\r\n-  quantity: number;\r\n-}\r\n+const VITE_STRIPE_PUBLISHABLE_KEY = import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY\r\n \r\n const cart = useCartStore()\r\n-const auth = useAuthStore()\r\n-const total = computed(() => cart.items.reduce((sum: number, item: CartItem) => sum + item.price * item.quantity, 0))\r\n-const totalWithTax = computed(() => total.value * 1.18)\r\n+const authStore = useAuthStore()\r\n+const router = useRouter()\r\n \r\n-const cardNumber = ref('')\r\n-const cardHolder = ref('')\r\n-const expiry = ref('')\r\n-const cvv = ref('')\r\n+const deliveryAddress = ref('')\r\n+const selectedPaymentMethod = ref('cod') // 'cod' for Cash on Delivery, 'card' for Credit Card\r\n+const isSubmitting = ref(false)\r\n \r\n-const formatExpiry = (e: Event) => {\r\n-  let value = (e.target as HTMLInputElement).value.replace(/[^0-9]/g, '')\r\n-  if (value.length > 2) {\r\n-    value = value.slice(0, 2) + '/' + value.slice(2, 4)\r\n+const cardDetails = ref({\r\n+  cardHolder: '',\r\n+})\r\n+const cardError = ref('')\r\n+let stripe: any = null\r\n+let cardElement: any = null\r\n+\r\n+const subtotal = computed(() => cart.items.reduce((sum, item) => sum + item.price * item.quantity, 0))\r\n+const tax = computed(() => subtotal.value * 0.20) // KDV %20\r\n+const total = computed(() => subtotal.value + tax.value)\r\n+\r\n+onMounted(async () => {\r\n+  if (authStore.user && authStore.user.address) {\r\n+    deliveryAddress.value = authStore.user.address\r\n   }\r\n-  expiry.value = value\r\n+\r\n+  if (VITE_STRIPE_PUBLISHABLE_KEY) {\r\n+    stripe = await loadStripe(VITE_STRIPE_PUBLISHABLE_KEY)\r\n+    const elements = stripe.elements()\r\n+    cardElement = elements.create('card', {\r\n+      style: {\r\n+        base: {\r\n+          fontSize: '16px',\r\n+        },\r\n+      },\r\n+    })\r\n+    cardElement.mount('#card-element')\r\n+    cardElement.on('change', (event: any) => {\r\n+      if (event.error) {\r\n+        cardError.value = event.error.message\r\n+      } else {\r\n+        cardError.value = ''\r\n+      }\r\n+    })\r\n+  }\r\n+})\r\n+\r\n+const submitOrder = async () => {\r\n+  isSubmitting.value = true\r\n+  if (selectedPaymentMethod.value === 'cod') {\r\n+    await handleCashOnDelivery()\r\n+  } else if (selectedPaymentMethod.value === 'card') {\r\n+    await handleCardPayment()\r\n+  }\r\n+  isSubmitting.value = false\r\n }\r\n \r\n-const submitPayment = async () => {\r\n+const handleCashOnDelivery = async () => {\r\n   try {\r\n-    const [expiryMonth, expiryYear] = expiry.value.split('/');\r\n-    \r\n-    const paymentData = {\r\n-      cardNumber: cardNumber.value,\r\n-      cardHolder: cardHolder.value,\r\n-      expiry: expiry.value,\r\n-      cvv: cvv.value,\r\n-      amount: totalWithTax.value,\r\n-      orderDetails: {\r\n-        customerId: auth.user?.id,\r\n-        items: cart.items.map(item => ({\r\n-          productId: item.id,\r\n-          quantity: item.quantity\r\n-        }))\r\n-      }\r\n-    };\r\n+    const orderData = {\r\n+      customerId: authStore.user?.id,\r\n+      items: cart.items.map(item => ({ productId: item.id, quantity: item.quantity, price: item.price })),\r\n+      total: total.value,\r\n+      shippingAddress: deliveryAddress.value,\r\n+      paymentMethod: 'cod',\r\n+    }\r\n+    await axios.post('/backend/orders', orderData)\r\n+    cart.clearCart()\r\n+    router.push('/orders')\r\n+    alert('Siparişiniz başarıyla alındı!')\r\n+  } catch (error) {\r\n+    console.error('Sipariş oluşturma hatası:', error)\r\n+    alert('Sipariş oluşturulurken bir hata oluştu.')\r\n+  }\r\n+}\r\n \r\n-    const response = await fetch('/api/payment', {\r\n-      method: 'POST',\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n+const handleCardPayment = async () => {\r\n+  if (!stripe || !cardElement) {\r\n+    alert('Ödeme sistemi yüklenemedi.')\r\n+    return\r\n+  }\r\n+\r\n+  try {\r\n+    const { data: clientSecret } = await axios.post('/backend/payment/create-payment-intent', {\r\n+      amount: Math.round(total.value * 100), // Amount in cents\r\n+    })\r\n+\r\n+    const { paymentIntent, error } = await stripe.confirmCardPayment(clientSecret, {\r\n+      payment_method: {\r\n+        card: cardElement,\r\n+        billing_details: {\r\n+          name: cardDetails.value.cardHolder,\r\n+        },\r\n       },\r\n-      body: JSON.stringify(paymentData),\r\n-    });\r\n+    })\r\n \r\n-    const result = await response.json();\r\n-    \r\n-    if (result.success) {\r\n-      alert('Ödeme başarılı! Siparişiniz oluşturuldu.');\r\n-      cart.clearCart(); // Assuming you have a clearCart method in your store\r\n-      // You might want to redirect to a success page or order details page\r\n-    } else {\r\n-      alert(`Ödeme başarısız: ${result.message}`);\r\n+    if (error) {\r\n+      cardError.value = error.message\r\n+      return\r\n     }\r\n-  } catch (error) {\r\n-    console.error('Ödeme hatası:', error);\r\n-    alert('Ödeme işlemi sırasında bir hata oluştu. Lütfen tekrar deneyin.');\r\n+\r\n+    if (paymentIntent.status === 'succeeded') {\r\n+      const orderData = {\r\n+        customerId: authStore.user?.id,\r\n+        items: cart.items.map(item => ({ productId: item.id, quantity: item.quantity, price: item.price })),\r\n+        total: total.value,\r\n+        shippingAddress: deliveryAddress.value,\r\n+        paymentMethod: 'card',\r\n+        paymentIntentId: paymentIntent.id,\r\n+      }\r\n+      await axios.post('/backend/orders', orderData)\r\n+      cart.clearCart()\r\n+      router.push('/orders')\r\n+      alert('Ödemeniz ve siparişiniz başarıyla alındı!')\r\n+    }\r\n+  } catch (err) {\r\n+    console.error('Ödeme hatası:', err)\r\n+    alert('Ödeme sırasında bir hata oluştu.')\r\n   }\r\n }\r\n </script>\r\n \r\n"
                },
                {
                    "date": 1750682455020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,54 +219,160 @@\n </script>\r\n \r\n <style scoped>\r\n .cashout-page {\r\n-  max-width: 500px;\r\n+  max-width: 600px;\r\n   margin: 2rem auto;\r\n-  background: #fff;\r\n+  background: white;\r\n   border-radius: 12px;\r\n-  box-shadow: 0 2px 8px rgba(0,0,0,0.06);\r\n-  padding: 2rem;\r\n+  box-shadow: 0 4px 12px rgba(0,0,0,0.08);\r\n+  padding: 2.5rem;\r\n }\r\n-.order-summary {\r\n+\r\n+.page-title {\r\n+  text-align: center;\r\n+  font-size: 1.8rem;\r\n+  font-weight: 700;\r\n+  color: #2c3e50;\r\n   margin-bottom: 2rem;\r\n }\r\n-.order-summary ul {\r\n-  padding-left: 1.2rem;\r\n+\r\n+.section-title {\r\n+  font-size: 1.3rem;\r\n+  font-weight: 600;\r\n+  color: #42b983;\r\n+  margin-bottom: 1.5rem;\r\n+  padding-bottom: 0.5rem;\r\n+  border-bottom: 2px solid #f0f0f0;\r\n }\r\n-.order-summary .total {\r\n+\r\n+.order-summary, .delivery-address, .payment-method, .credit-card-form {\r\n+  margin-bottom: 2rem;\r\n+}\r\n+\r\n+.items-list {\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.8rem;\r\n+  margin-bottom: 1rem;\r\n+}\r\n+\r\n+.summary-item {\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  color: #555;\r\n+}\r\n+\r\n+.summary-total {\r\n+  border-top: 1px solid #eee;\r\n+  padding-top: 1rem;\r\n+}\r\n+\r\n+.total-row {\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  margin-bottom: 0.5rem;\r\n+  color: #333;\r\n+}\r\n+\r\n+.grand-total {\r\n+  font-size: 1.2rem;\r\n+  font-weight: 700;\r\n+  color: #2c3e50;\r\n   margin-top: 1rem;\r\n-  font-size: 1.2rem;\r\n }\r\n-.payment-form label {\r\n+\r\n+.form-group {\r\n+  margin-bottom: 1.5rem;\r\n+}\r\n+\r\n+.form-group label {\r\n   display: block;\r\n-  margin-bottom: 0.2rem;\r\n+  margin-bottom: 0.5rem;\r\n   font-weight: 500;\r\n+  color: #333;\r\n }\r\n-.payment-form input {\r\n+\r\n+.form-group input,\r\n+.form-group textarea {\r\n   width: 100%;\r\n-  padding: 0.5rem;\r\n-  margin-bottom: 1rem;\r\n-  border-radius: 6px;\r\n+  padding: 0.8rem;\r\n   border: 1px solid #ccc;\r\n+  border-radius: 8px;\r\n   font-size: 1rem;\r\n+  font-family: inherit;\r\n+  transition: border-color 0.2s;\r\n }\r\n-.payment-form .row {\r\n-  display: flex;\r\n+\r\n+.form-group input:focus,\r\n+.form-group textarea:focus {\r\n+  outline: none;\r\n+  border-color: #42b983;\r\n+}\r\n+\r\n+.payment-options {\r\n+  display: grid;\r\n+  grid-template-columns: 1fr 1fr;\r\n   gap: 1rem;\r\n }\r\n-button[type=\"submit\"] {\r\n+\r\n+.payment-option {\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.8rem;\r\n+  padding: 1rem;\r\n+  border: 2px solid #ddd;\r\n+  border-radius: 8px;\r\n+  cursor: pointer;\r\n+  transition: border-color 0.2s, background-color 0.2s;\r\n+}\r\n+\r\n+.payment-option.selected {\r\n+  border-color: #42b983;\r\n+  background-color: #f0f8f5;\r\n+}\r\n+\r\n+.payment-option input[type=\"radio\"] {\r\n+  width: 1.2rem;\r\n+  height: 1.2rem;\r\n+}\r\n+\r\n+.subsection-title {\r\n+  font-size: 1.1rem;\r\n+  font-weight: 600;\r\n+  color: #333;\r\n+  margin-bottom: 1rem;\r\n+}\r\n+\r\n+#card-element {\r\n+  padding: 1rem;\r\n+  border: 1px solid #ccc;\r\n+  border-radius: 8px;\r\n+}\r\n+\r\n+.card-error {\r\n+  color: #c62828;\r\n+  margin-top: 0.5rem;\r\n+}\r\n+\r\n+.btn-submit {\r\n   width: 100%;\r\n-  background: #1867C0;\r\n-  color: #fff;\r\n+  padding: 1rem;\r\n+  background: #42b983;\r\n+  color: white;\r\n   border: none;\r\n-  border-radius: 6px;\r\n-  padding: 0.8rem;\r\n+  border-radius: 8px;\r\n   font-size: 1.1rem;\r\n   font-weight: 600;\r\n   cursor: pointer;\r\n-  margin-top: 0.5rem;\r\n+  transition: background-color 0.2s;\r\n }\r\n-button[type=\"submit\"]:hover {\r\n-  background: #145399;\r\n+\r\n+.btn-submit:hover:not(:disabled) {\r\n+  background: #3aa876;\r\n }\r\n+\r\n+.btn-submit:disabled {\r\n+  background: #ccc;\r\n+  cursor: not-allowed;\r\n+}\r\n </style> \n\\ No newline at end of file\n"
                },
                {
                    "date": 1750682961807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n <template>\r\n   <div class=\"cashout-page\">\r\n-    <h1 class=\"page-title\">Alışverişi Tamamla</h1>\r\n+    <h1 class=\"page-title\">Kredi Kartı ile Ödeme</h1>\r\n \r\n     <!-- Sipariş Özeti -->\r\n     <div class=\"order-summary\">\r\n       <h2 class=\"section-title\">Sipariş Özeti</h2>\r\n@@ -26,197 +26,53 @@\n         </div>\r\n       </div>\r\n     </div>\r\n \r\n-    <form @submit.prevent=\"submitOrder\">\r\n-      <!-- Teslimat Adresi -->\r\n-      <div class=\"delivery-address\">\r\n-        <h2 class=\"section-title\">Teslimat Adresi</h2>\r\n-        <div class=\"form-group\">\r\n-          <label for=\"address\">Adresiniz</label>\r\n-          <textarea\r\n-            id=\"address\"\r\n-            v-model=\"deliveryAddress\"\r\n-            rows=\"3\"\r\n-            placeholder=\"Lütfen teslimat adresinizi girin...\"\r\n-            required\r\n-          ></textarea>\r\n-        </div>\r\n+    <!-- Ödeme Formu (Basit) -->\r\n+    <form class=\"payment-form\" @submit.prevent=\"submitPayment\">\r\n+      <div class=\"form-group\">\r\n+        <label for=\"cardHolder\">Kart Sahibi</label>\r\n+        <input id=\"cardHolder\" v-model=\"cardHolder\" required placeholder=\"Ad Soyad\" />\r\n       </div>\r\n-\r\n-      <!-- Ödeme Yöntemi -->\r\n-      <div class=\"payment-method\">\r\n-        <h2 class=\"section-title\">Ödeme Yöntemi</h2>\r\n-        <div class=\"payment-options\">\r\n-          <div\r\n-            class=\"payment-option\"\r\n-            :class=\"{ selected: selectedPaymentMethod === 'cod' }\"\r\n-            @click=\"selectedPaymentMethod = 'cod'\"\r\n-          >\r\n-            <input type=\"radio\" id=\"cod\" value=\"cod\" v-model=\"selectedPaymentMethod\" />\r\n-            <label for=\"cod\">Kapıda Ödeme</label>\r\n-          </div>\r\n-          <div\r\n-            class=\"payment-option\"\r\n-            :class=\"{ selected: selectedPaymentMethod === 'card' }\"\r\n-            @click=\"selectedPaymentMethod = 'card'\"\r\n-          >\r\n-            <input type=\"radio\" id=\"card\" value=\"card\" v-model=\"selectedPaymentMethod\" />\r\n-            <label for=\"card\">Kredi/Banka Kartı</label>\r\n-          </div>\r\n-        </div>\r\n+      <div class=\"form-group\">\r\n+        <label for=\"cardNumber\">Kart Numarası</label>\r\n+        <input id=\"cardNumber\" v-model=\"cardNumber\" required placeholder=\"0000 0000 0000 0000\" />\r\n       </div>\r\n-\r\n-      <!-- Kredi Kartı Formu -->\r\n-      <div v-if=\"selectedPaymentMethod === 'card'\" class=\"credit-card-form\">\r\n-        <h3 class=\"subsection-title\">Kart Bilgileri</h3>\r\n+      <div class=\"form-row\">\r\n         <div class=\"form-group\">\r\n-          <label for=\"cardHolder\">Kart Sahibi</label>\r\n-          <input id=\"cardHolder\" v-model=\"cardDetails.cardHolder\" required placeholder=\"Ad Soyad\" />\r\n+          <label for=\"expiry\">Son Kullanma (AA/YY)</label>\r\n+          <input id=\"expiry\" v-model=\"expiry\" required placeholder=\"AA/YY\" />\r\n         </div>\r\n         <div class=\"form-group\">\r\n-          <label for=\"cardNumber\">Kart Numarası</label>\r\n-          <div id=\"card-element\"></div>\r\n-          <!-- Stripe Card Element buraya gelecek -->\r\n+          <label for=\"cvv\">CVV</label>\r\n+          <input id=\"cvv\" v-model=\"cvv\" required placeholder=\"123\" />\r\n         </div>\r\n-        <div v-if=\"cardError\" class=\"card-error\">{{ cardError }}</div>\r\n       </div>\r\n-\r\n-      <button type=\"submit\" class=\"btn-submit\" :disabled=\"isSubmitting\">\r\n-        {{ isSubmitting ? 'İşleniyor...' : 'Siparişi Tamamla' }}\r\n+      <button type=\"submit\" class=\"btn-submit\">\r\n+        Ödemeyi Tamamla (Yakında)\r\n       </button>\r\n     </form>\r\n   </div>\r\n </template>\r\n \r\n <script setup lang=\"ts\">\r\n-import { ref, computed, onMounted } from 'vue'\r\n+import { ref, computed } from 'vue'\r\n import { useCartStore } from '@/stores/cart'\r\n-import { useAuthStore } from '@/stores/auth'\r\n-import { useRouter } from 'vue-router'\r\n-import axios from 'axios'\r\n-import { loadStripe } from '@stripe/stripe-js'\r\n \r\n-const VITE_STRIPE_PUBLISHABLE_KEY = import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY\r\n-\r\n const cart = useCartStore()\r\n-const authStore = useAuthStore()\r\n-const router = useRouter()\r\n \r\n-const deliveryAddress = ref('')\r\n-const selectedPaymentMethod = ref('cod') // 'cod' for Cash on Delivery, 'card' for Credit Card\r\n-const isSubmitting = ref(false)\r\n+const cardHolder = ref('')\r\n+const cardNumber = ref('')\r\n+const expiry = ref('')\r\n+const cvv = ref('')\r\n \r\n-const cardDetails = ref({\r\n-  cardHolder: '',\r\n-})\r\n-const cardError = ref('')\r\n-let stripe: any = null\r\n-let cardElement: any = null\r\n-\r\n-const subtotal = computed(() => cart.items.reduce((sum, item) => sum + item.price * item.quantity, 0))\r\n-const tax = computed(() => subtotal.value * 0.20) // KDV %20\r\n+const subtotal = computed(() => (cart.items ? cart.items.reduce((sum, item) => sum + item.price * item.quantity, 0) : 0))\r\n+const tax = computed(() => subtotal.value * 0.20)\r\n const total = computed(() => subtotal.value + tax.value)\r\n \r\n-onMounted(async () => {\r\n-  if (authStore.user && authStore.user.address) {\r\n-    deliveryAddress.value = authStore.user.address\r\n-  }\r\n-\r\n-  if (VITE_STRIPE_PUBLISHABLE_KEY) {\r\n-    stripe = await loadStripe(VITE_STRIPE_PUBLISHABLE_KEY)\r\n-    const elements = stripe.elements()\r\n-    cardElement = elements.create('card', {\r\n-      style: {\r\n-        base: {\r\n-          fontSize: '16px',\r\n-        },\r\n-      },\r\n-    })\r\n-    cardElement.mount('#card-element')\r\n-    cardElement.on('change', (event: any) => {\r\n-      if (event.error) {\r\n-        cardError.value = event.error.message\r\n-      } else {\r\n-        cardError.value = ''\r\n-      }\r\n-    })\r\n-  }\r\n-})\r\n-\r\n-const submitOrder = async () => {\r\n-  isSubmitting.value = true\r\n-  if (selectedPaymentMethod.value === 'cod') {\r\n-    await handleCashOnDelivery()\r\n-  } else if (selectedPaymentMethod.value === 'card') {\r\n-    await handleCardPayment()\r\n-  }\r\n-  isSubmitting.value = false\r\n+const submitPayment = () => {\r\n+  alert('Bu ödeme yöntemi yakında aktif olacaktır.')\r\n }\r\n-\r\n-const handleCashOnDelivery = async () => {\r\n-  try {\r\n-    const orderData = {\r\n-      customerId: authStore.user?.id,\r\n-      items: cart.items.map(item => ({ productId: item.id, quantity: item.quantity, price: item.price })),\r\n-      total: total.value,\r\n-      shippingAddress: deliveryAddress.value,\r\n-      paymentMethod: 'cod',\r\n-    }\r\n-    await axios.post('/backend/orders', orderData)\r\n-    cart.clearCart()\r\n-    router.push('/orders')\r\n-    alert('Siparişiniz başarıyla alındı!')\r\n-  } catch (error) {\r\n-    console.error('Sipariş oluşturma hatası:', error)\r\n-    alert('Sipariş oluşturulurken bir hata oluştu.')\r\n-  }\r\n-}\r\n-\r\n-const handleCardPayment = async () => {\r\n-  if (!stripe || !cardElement) {\r\n-    alert('Ödeme sistemi yüklenemedi.')\r\n-    return\r\n-  }\r\n-\r\n-  try {\r\n-    const { data: clientSecret } = await axios.post('/backend/payment/create-payment-intent', {\r\n-      amount: Math.round(total.value * 100), // Amount in cents\r\n-    })\r\n-\r\n-    const { paymentIntent, error } = await stripe.confirmCardPayment(clientSecret, {\r\n-      payment_method: {\r\n-        card: cardElement,\r\n-        billing_details: {\r\n-          name: cardDetails.value.cardHolder,\r\n-        },\r\n-      },\r\n-    })\r\n-\r\n-    if (error) {\r\n-      cardError.value = error.message\r\n-      return\r\n-    }\r\n-\r\n-    if (paymentIntent.status === 'succeeded') {\r\n-      const orderData = {\r\n-        customerId: authStore.user?.id,\r\n-        items: cart.items.map(item => ({ productId: item.id, quantity: item.quantity, price: item.price })),\r\n-        total: total.value,\r\n-        shippingAddress: deliveryAddress.value,\r\n-        paymentMethod: 'card',\r\n-        paymentIntentId: paymentIntent.id,\r\n-      }\r\n-      await axios.post('/backend/orders', orderData)\r\n-      cart.clearCart()\r\n-      router.push('/orders')\r\n-      alert('Ödemeniz ve siparişiniz başarıyla alındı!')\r\n-    }\r\n-  } catch (err) {\r\n-    console.error('Ödeme hatası:', err)\r\n-    alert('Ödeme sırasında bir hata oluştu.')\r\n-  }\r\n-}\r\n </script>\r\n \r\n <style scoped>\r\n .cashout-page {\r\n@@ -244,9 +100,9 @@\n   padding-bottom: 0.5rem;\r\n   border-bottom: 2px solid #f0f0f0;\r\n }\r\n \r\n-.order-summary, .delivery-address, .payment-method, .credit-card-form {\r\n+.order-summary, .payment-form {\r\n   margin-bottom: 2rem;\r\n }\r\n \r\n .items-list {\r\n@@ -291,10 +147,9 @@\n   font-weight: 500;\r\n   color: #333;\r\n }\r\n \r\n-.form-group input,\r\n-.form-group textarea {\r\n+.form-group input {\r\n   width: 100%;\r\n   padding: 0.8rem;\r\n   border: 1px solid #ccc;\r\n   border-radius: 8px;\r\n@@ -302,59 +157,19 @@\n   font-family: inherit;\r\n   transition: border-color 0.2s;\r\n }\r\n \r\n-.form-group input:focus,\r\n-.form-group textarea:focus {\r\n+.form-group input:focus {\r\n   outline: none;\r\n   border-color: #42b983;\r\n }\r\n \r\n-.payment-options {\r\n+.form-row {\r\n   display: grid;\r\n   grid-template-columns: 1fr 1fr;\r\n   gap: 1rem;\r\n }\r\n \r\n-.payment-option {\r\n-  display: flex;\r\n-  align-items: center;\r\n-  gap: 0.8rem;\r\n-  padding: 1rem;\r\n-  border: 2px solid #ddd;\r\n-  border-radius: 8px;\r\n-  cursor: pointer;\r\n-  transition: border-color 0.2s, background-color 0.2s;\r\n-}\r\n-\r\n-.payment-option.selected {\r\n-  border-color: #42b983;\r\n-  background-color: #f0f8f5;\r\n-}\r\n-\r\n-.payment-option input[type=\"radio\"] {\r\n-  width: 1.2rem;\r\n-  height: 1.2rem;\r\n-}\r\n-\r\n-.subsection-title {\r\n-  font-size: 1.1rem;\r\n-  font-weight: 600;\r\n-  color: #333;\r\n-  margin-bottom: 1rem;\r\n-}\r\n-\r\n-#card-element {\r\n-  padding: 1rem;\r\n-  border: 1px solid #ccc;\r\n-  border-radius: 8px;\r\n-}\r\n-\r\n-.card-error {\r\n-  color: #c62828;\r\n-  margin-top: 0.5rem;\r\n-}\r\n-\r\n .btn-submit {\r\n   width: 100%;\r\n   padding: 1rem;\r\n   background: #42b983;\r\n@@ -366,13 +181,8 @@\n   cursor: pointer;\r\n   transition: background-color 0.2s;\r\n }\r\n \r\n-.btn-submit:hover:not(:disabled) {\r\n+.btn-submit:hover {\r\n   background: #3aa876;\r\n }\r\n-\r\n-.btn-submit:disabled {\r\n-  background: #ccc;\r\n-  cursor: not-allowed;\r\n-}\r\n </style> \n\\ No newline at end of file\n"
                }
            ],
            "date": 1750682418026,
            "name": "Commit-0",
            "content": "<template>\r\n  <div class=\"cashout-page\">\r\n    <h1 class=\"page-title\">Alışverişi Tamamla</h1>\r\n\r\n    <!-- Sipariş Özeti -->\r\n    <div class=\"order-summary\">\r\n      <h2 class=\"section-title\">Sipariş Özeti</h2>\r\n      <div v-if=\"cart.items.length > 0\" class=\"items-list\">\r\n        <div v-for=\"item in cart.items\" :key=\"item.id\" class=\"summary-item\">\r\n          <span>{{ item.name }} x{{ item.quantity }}</span>\r\n          <span>{{ (item.price * item.quantity).toLocaleString('tr-TR', { style: 'currency', currency: 'TRY' }) }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"summary-total\">\r\n        <div class=\"total-row\">\r\n          <span>Ara Toplam</span>\r\n          <span>{{ subtotal.toLocaleString('tr-TR', { style: 'currency', currency: 'TRY' }) }}</span>\r\n        </div>\r\n        <div class=\"total-row\">\r\n          <span>KDV (%20)</span>\r\n          <span>{{ tax.toLocaleString('tr-TR', { style: 'currency', currency: 'TRY' }) }}</span>\r\n        </div>\r\n        <div class=\"total-row grand-total\">\r\n          <span>Genel Toplam</span>\r\n          <span>{{ total.toLocaleString('tr-TR', { style: 'currency', currency: 'TRY' }) }}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <form @submit.prevent=\"submitOrder\">\r\n      <!-- Teslimat Adresi -->\r\n      <div class=\"delivery-address\">\r\n        <h2 class=\"section-title\">Teslimat Adresi</h2>\r\n        <div class=\"form-group\">\r\n          <label for=\"address\">Adresiniz</label>\r\n          <textarea\r\n            id=\"address\"\r\n            v-model=\"deliveryAddress\"\r\n            rows=\"3\"\r\n            placeholder=\"Lütfen teslimat adresinizi girin...\"\r\n            required\r\n          ></textarea>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Ödeme Yöntemi -->\r\n      <div class=\"payment-method\">\r\n        <h2 class=\"section-title\">Ödeme Yöntemi</h2>\r\n        <div class=\"payment-options\">\r\n          <div\r\n            class=\"payment-option\"\r\n            :class=\"{ selected: selectedPaymentMethod === 'cod' }\"\r\n            @click=\"selectedPaymentMethod = 'cod'\"\r\n          >\r\n            <input type=\"radio\" id=\"cod\" value=\"cod\" v-model=\"selectedPaymentMethod\" />\r\n            <label for=\"cod\">Kapıda Ödeme</label>\r\n          </div>\r\n          <div\r\n            class=\"payment-option\"\r\n            :class=\"{ selected: selectedPaymentMethod === 'card' }\"\r\n            @click=\"selectedPaymentMethod = 'card'\"\r\n          >\r\n            <input type=\"radio\" id=\"card\" value=\"card\" v-model=\"selectedPaymentMethod\" />\r\n            <label for=\"card\">Kredi/Banka Kartı</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Kredi Kartı Formu -->\r\n      <div v-if=\"selectedPaymentMethod === 'card'\" class=\"credit-card-form\">\r\n        <h3 class=\"subsection-title\">Kart Bilgileri</h3>\r\n        <div class=\"form-group\">\r\n          <label for=\"cardHolder\">Kart Sahibi</label>\r\n          <input id=\"cardHolder\" v-model=\"cardDetails.cardHolder\" required placeholder=\"Ad Soyad\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"cardNumber\">Kart Numarası</label>\r\n          <div id=\"card-element\"></div>\r\n          <!-- Stripe Card Element buraya gelecek -->\r\n        </div>\r\n        <div v-if=\"cardError\" class=\"card-error\">{{ cardError }}</div>\r\n      </div>\r\n\r\n      <button type=\"submit\" class=\"btn-submit\" :disabled=\"isSubmitting\">\r\n        {{ isSubmitting ? 'İşleniyor...' : 'Siparişi Tamamla' }}\r\n      </button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed } from 'vue'\r\nimport { useCartStore } from '@/stores/cart'\r\nimport { useAuthStore } from '@/stores/auth'\r\n\r\ninterface CartItem {\r\n  id: number;\r\n  name: string;\r\n  price: number;\r\n  quantity: number;\r\n}\r\n\r\nconst cart = useCartStore()\r\nconst auth = useAuthStore()\r\nconst total = computed(() => cart.items.reduce((sum: number, item: CartItem) => sum + item.price * item.quantity, 0))\r\nconst totalWithTax = computed(() => total.value * 1.18)\r\n\r\nconst cardNumber = ref('')\r\nconst cardHolder = ref('')\r\nconst expiry = ref('')\r\nconst cvv = ref('')\r\n\r\nconst formatExpiry = (e: Event) => {\r\n  let value = (e.target as HTMLInputElement).value.replace(/[^0-9]/g, '')\r\n  if (value.length > 2) {\r\n    value = value.slice(0, 2) + '/' + value.slice(2, 4)\r\n  }\r\n  expiry.value = value\r\n}\r\n\r\nconst submitPayment = async () => {\r\n  try {\r\n    const [expiryMonth, expiryYear] = expiry.value.split('/');\r\n    \r\n    const paymentData = {\r\n      cardNumber: cardNumber.value,\r\n      cardHolder: cardHolder.value,\r\n      expiry: expiry.value,\r\n      cvv: cvv.value,\r\n      amount: totalWithTax.value,\r\n      orderDetails: {\r\n        customerId: auth.user?.id,\r\n        items: cart.items.map(item => ({\r\n          productId: item.id,\r\n          quantity: item.quantity\r\n        }))\r\n      }\r\n    };\r\n\r\n    const response = await fetch('/api/payment', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(paymentData),\r\n    });\r\n\r\n    const result = await response.json();\r\n    \r\n    if (result.success) {\r\n      alert('Ödeme başarılı! Siparişiniz oluşturuldu.');\r\n      cart.clearCart(); // Assuming you have a clearCart method in your store\r\n      // You might want to redirect to a success page or order details page\r\n    } else {\r\n      alert(`Ödeme başarısız: ${result.message}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('Ödeme hatası:', error);\r\n    alert('Ödeme işlemi sırasında bir hata oluştu. Lütfen tekrar deneyin.');\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.cashout-page {\r\n  max-width: 500px;\r\n  margin: 2rem auto;\r\n  background: #fff;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.06);\r\n  padding: 2rem;\r\n}\r\n.order-summary {\r\n  margin-bottom: 2rem;\r\n}\r\n.order-summary ul {\r\n  padding-left: 1.2rem;\r\n}\r\n.order-summary .total {\r\n  margin-top: 1rem;\r\n  font-size: 1.2rem;\r\n}\r\n.payment-form label {\r\n  display: block;\r\n  margin-bottom: 0.2rem;\r\n  font-weight: 500;\r\n}\r\n.payment-form input {\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  margin-bottom: 1rem;\r\n  border-radius: 6px;\r\n  border: 1px solid #ccc;\r\n  font-size: 1rem;\r\n}\r\n.payment-form .row {\r\n  display: flex;\r\n  gap: 1rem;\r\n}\r\nbutton[type=\"submit\"] {\r\n  width: 100%;\r\n  background: #1867C0;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 6px;\r\n  padding: 0.8rem;\r\n  font-size: 1.1rem;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  margin-top: 0.5rem;\r\n}\r\nbutton[type=\"submit\"]:hover {\r\n  background: #145399;\r\n}\r\n</style> "
        }
    ]
}