{
    "sourceFile": "frontend/src/views/admin/ProductsView.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1748300942548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748301100344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,416 +1,422 @@\n-<template>\r\n-  <div class=\"admin-products\">\r\n-    <div class=\"page-header\">\r\n-      <h1>Ürün Yönetimi</h1>\r\n-      <button class=\"btn-add\" @click=\"showAddModal = true\">\r\n-        <i class=\"fas fa-plus\"></i>\r\n-        Yeni Ürün\r\n-      </button>\r\n-    </div>\r\n-\r\n-    <div class=\"products-table\">\r\n-      <table>\r\n-        <thead>\r\n-          <tr>\r\n-            <th>ID</th>\r\n-            <th>Resim</th>\r\n-            <th>Ürün Adı</th>\r\n-            <th>Fiyat</th>\r\n-            <th>Stok</th>\r\n-            <th>Durum</th>\r\n-            <th>İşlemler</th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          <tr v-for=\"product in products\" :key=\"product.id\">\r\n-            <td>{{ product.id }}</td>\r\n-            <td>\r\n-              <img :src=\"product.image\" :alt=\"product.name\" class=\"product-image\">\r\n-            </td>\r\n-            <td>{{ product.name }}</td>\r\n-            <td>{{ product.price }} TL</td>\r\n-            <td>{{ product.stock }}</td>\r\n-            <td>\r\n-              <span :class=\"['status', product.isActive ? 'active' : 'inactive']\">\r\n-                {{ product.isActive ? 'Aktif' : 'Pasif' }}\r\n-              </span>\r\n-            </td>\r\n-            <td>\r\n-              <div class=\"actions\">\r\n-                <button class=\"btn-edit\" @click=\"editProduct(product)\">\r\n-                  <i class=\"fas fa-edit\"></i>\r\n-                </button>\r\n-                <button class=\"btn-delete\" @click=\"deleteProduct(product.id)\">\r\n-                  <i class=\"fas fa-trash\"></i>\r\n-                </button>\r\n-              </div>\r\n-            </td>\r\n-          </tr>\r\n-        </tbody>\r\n-      </table>\r\n-    </div>\r\n-\r\n-    <!-- Add/Edit Product Modal -->\r\n-    <div v-if=\"showAddModal\" class=\"modal\">\r\n-      <div class=\"modal-content\">\r\n-        <h2>{{ editingProduct ? 'Ürün Düzenle' : 'Yeni Ürün' }}</h2>\r\n-        <form @submit.prevent=\"handleSubmit\" class=\"product-form\">\r\n-          <div class=\"form-group\">\r\n-            <label for=\"name\">Ürün Adı</label>\r\n-            <input \r\n-              type=\"text\" \r\n-              id=\"name\" \r\n-              v-model=\"form.name\" \r\n-              required\r\n-            >\r\n-          </div>\r\n-          <div class=\"form-group\">\r\n-            <label for=\"description\">Açıklama</label>\r\n-            <textarea \r\n-              id=\"description\" \r\n-              v-model=\"form.description\" \r\n-              required\r\n-              rows=\"3\"\r\n-            ></textarea>\r\n-          </div>\r\n-          <div class=\"form-group\">\r\n-            <label for=\"price\">Fiyat</label>\r\n-            <input \r\n-              type=\"number\" \r\n-              id=\"price\" \r\n-              v-model=\"form.price\" \r\n-              required\r\n-              min=\"0\"\r\n-              step=\"0.01\"\r\n-            >\r\n-          </div>\r\n-          <div class=\"form-group\">\r\n-            <label for=\"stock\">Stok</label>\r\n-            <input \r\n-              type=\"number\" \r\n-              id=\"stock\" \r\n-              v-model=\"form.stock\" \r\n-              required\r\n-              min=\"0\"\r\n-            >\r\n-          </div>\r\n-          <div class=\"form-group\">\r\n-            <label for=\"image\">Resim URL</label>\r\n-            <input \r\n-              type=\"url\" \r\n-              id=\"image\" \r\n-              v-model=\"form.image\" \r\n-              required\r\n-            >\r\n-          </div>\r\n-          <div class=\"form-group\">\r\n-            <label class=\"checkbox-label\">\r\n-              <input \r\n-                type=\"checkbox\" \r\n-                v-model=\"form.isActive\"\r\n-              >\r\n-              Aktif\r\n-            </label>\r\n-          </div>\r\n-          <div class=\"form-actions\">\r\n-            <button type=\"button\" class=\"btn-cancel\" @click=\"closeModal\">\r\n-              İptal\r\n-            </button>\r\n-            <button type=\"submit\" class=\"btn-submit\">\r\n-              {{ editingProduct ? 'Güncelle' : 'Ekle' }}\r\n-            </button>\r\n-          </div>\r\n-        </form>\r\n-      </div>\r\n-    </div>\r\n-  </div>\r\n-</template>\r\n-\r\n-<script setup lang=\"ts\">\r\n-import { ref, reactive } from 'vue'\r\n-import axios from 'axios'\r\n-\r\n-interface Product {\r\n-  id: number\r\n-  name: string\r\n-  description: string\r\n-  price: number\r\n-  stock: number\r\n-  image: string\r\n-  isActive: boolean\r\n-}\r\n-\r\n-const products = ref<Product[]>([])\r\n-const showAddModal = ref(false)\r\n-const editingProduct = ref<Product | null>(null)\r\n-const error = ref('')\r\n-\r\n-const form = reactive({\r\n-  name: '',\r\n-  description: '',\r\n-  price: 0,\r\n-  stock: 0,\r\n-  image: '',\r\n-  isActive: true\r\n-})\r\n-\r\n-const fetchProducts = async () => {\r\n-  try {\r\n-    const response = await axios.get('/api/products')\r\n-    products.value = response.data\r\n-  } catch (err) {\r\n-    error.value = 'Ürünler yüklenirken hata oluştu.'\r\n-  }\r\n-}\r\n-\r\n-fetchProducts()\r\n-\r\n-const editProduct = (product: Product) => {\r\n-  editingProduct.value = product\r\n-  Object.assign(form, product)\r\n-  showAddModal.value = true\r\n-}\r\n-\r\n-const deleteProduct = async (id: number) => {\r\n-  if (confirm('Bu ürünü silmek istediğinizden emin misiniz?')) {\r\n-    try {\r\n-      // TODO: Implement delete logic\r\n-      console.log('Deleting product:', id)\r\n-      products.value = products.value.filter(p => p.id !== id)\r\n-    } catch (error) {\r\n-      console.error('Error deleting product:', error)\r\n-      alert('Ürün silinirken bir hata oluştu.')\r\n-    }\r\n-  }\r\n-}\r\n-\r\n-const handleSubmit = async () => {\r\n-  try {\r\n-    error.value = ''\r\n-    if (editingProduct.value) {\r\n-      // TODO: Implement update logic\r\n-      // (Aynı şekilde axios ile PUT isteği yapılabilir)\r\n-    } else {\r\n-      // Backend'e ürün ekle\r\n-      const response = await axios.post('/api/products', form)\r\n-      products.value.push(response.data)\r\n-    }\r\n-    closeModal()\r\n-  } catch (err) {\r\n-    error.value = err.response?.data?.message || 'Ürün kaydedilirken bir hata oluştu.'\r\n-  }\r\n-}\r\n-\r\n-const closeModal = () => {\r\n-  showAddModal.value = false\r\n-  editingProduct.value = null\r\n-  Object.assign(form, {\r\n-    name: '',\r\n-    description: '',\r\n-    price: 0,\r\n-    stock: 0,\r\n-    image: '',\r\n-    isActive: true\r\n-  })\r\n-  error.value = ''\r\n-}\r\n-</script>\r\n-\r\n-<style scoped>\r\n-.admin-products {\r\n-  padding: 1rem;\r\n-}\r\n-\r\n-.page-header {\r\n-  display: flex;\r\n-  justify-content: space-between;\r\n-  align-items: center;\r\n-  margin-bottom: 2rem;\r\n-}\r\n-\r\n-.btn-add {\r\n-  display: flex;\r\n-  align-items: center;\r\n-  gap: 0.5rem;\r\n-  padding: 0.75rem 1.5rem;\r\n-  background-color: #42b983;\r\n-  color: white;\r\n-  border: none;\r\n-  border-radius: 4px;\r\n-  cursor: pointer;\r\n-  transition: background-color 0.2s;\r\n-}\r\n-\r\n-.btn-add:hover {\r\n-  background-color: #3aa876;\r\n-}\r\n-\r\n-.products-table {\r\n-  background-color: white;\r\n-  border-radius: 8px;\r\n-  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n-  overflow-x: auto;\r\n-}\r\n-\r\n-table {\r\n-  width: 100%;\r\n-  border-collapse: collapse;\r\n-}\r\n-\r\n-th, td {\r\n-  padding: 1rem;\r\n-  text-align: left;\r\n-  border-bottom: 1px solid #eee;\r\n-}\r\n-\r\n-th {\r\n-  background-color: #f8f9fa;\r\n-  font-weight: 600;\r\n-  color: #333;\r\n-}\r\n-\r\n-.product-image {\r\n-  width: 50px;\r\n-  height: 50px;\r\n-  object-fit: cover;\r\n-  border-radius: 4px;\r\n-}\r\n-\r\n-.status {\r\n-  padding: 0.25rem 0.5rem;\r\n-  border-radius: 4px;\r\n-  font-size: 0.875rem;\r\n-}\r\n-\r\n-.status.active {\r\n-  background-color: #e8f5e9;\r\n-  color: #2e7d32;\r\n-}\r\n-\r\n-.status.inactive {\r\n-  background-color: #ffebee;\r\n-  color: #c62828;\r\n-}\r\n-\r\n-.actions {\r\n-  display: flex;\r\n-  gap: 0.5rem;\r\n-}\r\n-\r\n-.btn-edit, .btn-delete {\r\n-  padding: 0.5rem;\r\n-  border: none;\r\n-  border-radius: 4px;\r\n-  cursor: pointer;\r\n-  transition: background-color 0.2s;\r\n-}\r\n-\r\n-.btn-edit {\r\n-  background-color: #2196f3;\r\n-  color: white;\r\n-}\r\n-\r\n-.btn-delete {\r\n-  background-color: #f44336;\r\n-  color: white;\r\n-}\r\n-\r\n-.btn-edit:hover {\r\n-  background-color: #1976d2;\r\n-}\r\n-\r\n-.btn-delete:hover {\r\n-  background-color: #d32f2f;\r\n-}\r\n-\r\n-.modal {\r\n-  position: fixed;\r\n-  top: 0;\r\n-  left: 0;\r\n-  right: 0;\r\n-  bottom: 0;\r\n-  background-color: rgba(0,0,0,0.5);\r\n-  display: flex;\r\n-  align-items: center;\r\n-  justify-content: center;\r\n-  z-index: 1000;\r\n-}\r\n-\r\n-.modal-content {\r\n-  background-color: white;\r\n-  padding: 2rem;\r\n-  border-radius: 8px;\r\n-  width: 100%;\r\n-  max-width: 500px;\r\n-}\r\n-\r\n-.product-form {\r\n-  display: flex;\r\n-  flex-direction: column;\r\n-  gap: 1rem;\r\n-}\r\n-\r\n-.form-group {\r\n-  display: flex;\r\n-  flex-direction: column;\r\n-  gap: 0.5rem;\r\n-}\r\n-\r\n-label {\r\n-  font-weight: 500;\r\n-  color: #333;\r\n-}\r\n-\r\n-input, textarea {\r\n-  padding: 0.75rem;\r\n-  border: 1px solid #ddd;\r\n-  border-radius: 4px;\r\n-  font-size: 1rem;\r\n-}\r\n-\r\n-input:focus, textarea:focus {\r\n-  outline: none;\r\n-  border-color: #42b983;\r\n-}\r\n-\r\n-.checkbox-label {\r\n-  display: flex;\r\n-  align-items: center;\r\n-  gap: 0.5rem;\r\n-  cursor: pointer;\r\n-}\r\n-\r\n-.form-actions {\r\n-  display: flex;\r\n-  justify-content: flex-end;\r\n-  gap: 1rem;\r\n-  margin-top: 1rem;\r\n-}\r\n-\r\n-.btn-cancel {\r\n-  padding: 0.75rem 1.5rem;\r\n-  background-color: #f8f9fa;\r\n-  border: 1px solid #ddd;\r\n-  border-radius: 4px;\r\n-  cursor: pointer;\r\n-  transition: background-color 0.2s;\r\n-}\r\n-\r\n-.btn-cancel:hover {\r\n-  background-color: #e9ecef;\r\n-}\r\n-\r\n-.btn-submit {\r\n-  padding: 0.75rem 1.5rem;\r\n-  background-color: #42b983;\r\n-  color: white;\r\n-  border: none;\r\n-  border-radius: 4px;\r\n-  cursor: pointer;\r\n-  transition: background-color 0.2s;\r\n-}\r\n-\r\n-.btn-submit:hover {\r\n-  background-color: #3aa876;\r\n-}\r\n+<template>\n+  <div class=\"admin-products\">\n+    <div class=\"page-header\">\n+      <h1>Ürün Yönetimi</h1>\n+      <button class=\"btn-add\" @click=\"showAddModal = true\">\n+        <i class=\"fas fa-plus\"></i>\n+        Yeni Ürün\n+      </button>\n+    </div>\n+\n+    <div class=\"products-table\">\n+      <table>\n+        <thead>\n+          <tr>\n+            <th>ID</th>\n+            <th>Resim</th>\n+            <th>Ürün Adı</th>\n+            <th>Fiyat</th>\n+            <th>Stok</th>\n+            <th>Durum</th>\n+            <th>İşlemler</th>\n+          </tr>\n+        </thead>\n+        <tbody>\n+          <tr v-for=\"product in products\" :key=\"product.id\">\n+            <td>{{ product.id }}</td>\n+            <td>\n+              <img :src=\"product.image\" :alt=\"product.name\" class=\"product-image\">\n+            </td>\n+            <td>{{ product.name }}</td>\n+            <td>{{ product.price }} TL</td>\n+            <td>{{ product.stock }}</td>\n+            <td>\n+              <span :class=\"['status', product.isActive ? 'active' : 'inactive']\">\n+                {{ product.isActive ? 'Aktif' : 'Pasif' }}\n+              </span>\n+            </td>\n+            <td>\n+              <div class=\"actions\">\n+                <button class=\"btn-edit\" @click=\"editProduct(product)\">\n+                  <i class=\"fas fa-edit\"></i>\n+                </button>\n+                <button class=\"btn-delete\" @click=\"deleteProduct(product.id)\">\n+                  <i class=\"fas fa-trash\"></i>\n+                </button>\n+              </div>\n+            </td>\n+          </tr>\n+        </tbody>\n+      </table>\n+    </div>\n+\n+    <!-- Add/Edit Product Modal -->\n+    <div v-if=\"showAddModal\" class=\"modal\">\n+      <div class=\"modal-content\">\n+        <h2>{{ editingProduct ? 'Ürün Düzenle' : 'Yeni Ürün' }}</h2>\n+        <form @submit.prevent=\"handleSubmit\" class=\"product-form\">\n+          <div class=\"form-group\">\n+            <label for=\"name\">Ürün Adı</label>\n+            <input \n+              type=\"text\" \n+              id=\"name\" \n+              v-model=\"form.name\" \n+              required\n+            >\n+          </div>\n+          <div class=\"form-group\">\n+            <label for=\"description\">Açıklama</label>\n+            <textarea \n+              id=\"description\" \n+              v-model=\"form.description\" \n+              required\n+              rows=\"3\"\n+            ></textarea>\n+          </div>\n+          <div class=\"form-group\">\n+            <label for=\"price\">Fiyat</label>\n+            <input \n+              type=\"number\" \n+              id=\"price\" \n+              v-model=\"form.price\" \n+              required\n+              min=\"0\"\n+              step=\"0.01\"\n+            >\n+          </div>\n+          <div class=\"form-group\">\n+            <label for=\"stock\">Stok</label>\n+            <input \n+              type=\"number\" \n+              id=\"stock\" \n+              v-model=\"form.stock\" \n+              required\n+              min=\"0\"\n+            >\n+          </div>\n+          <div class=\"form-group\">\n+            <label for=\"image\">Resim URL</label>\n+            <input \n+              type=\"url\" \n+              id=\"image\" \n+              v-model=\"form.image\" \n+              required\n+            >\n+          </div>\n+          <div class=\"form-group\">\n+            <label class=\"checkbox-label\">\n+              <input \n+                type=\"checkbox\" \n+                v-model=\"form.isActive\"\n+              >\n+              Aktif\n+            </label>\n+          </div>\n+          <div class=\"form-actions\">\n+            <button type=\"button\" class=\"btn-cancel\" @click=\"closeModal\">\n+              İptal\n+            </button>\n+            <button type=\"submit\" class=\"btn-submit\">\n+              {{ editingProduct ? 'Güncelle' : 'Ekle' }}\n+            </button>\n+          </div>\n+        </form>\n+      </div>\n+    </div>\n+  </div>\n+</template>\n+\n+<script setup lang=\"ts\">\n+import { ref, reactive } from 'vue'\n+\n+interface Product {\n+  id: number\n+  name: string\n+  description: string\n+  price: number\n+  stock: number\n+  image: string\n+  isActive: boolean\n+}\n+\n+const products = ref<Product[]>([\n+  {\n+    id: 1,\n+    name: 'Örnek Ürün 1',\n+    description: 'Ürün açıklaması',\n+    price: 199.99,\n+    stock: 10,\n+    image: '/images/product1.jpg',\n+    isActive: true\n+  },\n+  // Add more sample products\n+])\n+\n+const showAddModal = ref(false)\n+const editingProduct = ref<Product | null>(null)\n+\n+const form = reactive({\n+  name: '',\n+  description: '',\n+  price: 0,\n+  stock: 0,\n+  image: '',\n+  isActive: true\n+})\n+\n+const editProduct = (product: Product) => {\n+  editingProduct.value = product\n+  Object.assign(form, product)\n+  showAddModal.value = true\n+}\n+\n+const deleteProduct = async (id: number) => {\n+  if (confirm('Bu ürünü silmek istediğinizden emin misiniz?')) {\n+    try {\n+      // TODO: Implement delete logic\n+      console.log('Deleting product:', id)\n+      products.value = products.value.filter(p => p.id !== id)\n+    } catch (error) {\n+      console.error('Error deleting product:', error)\n+      alert('Ürün silinirken bir hata oluştu.')\n+    }\n+  }\n+}\n+\n+const handleSubmit = async () => {\n+  try {\n+    if (editingProduct.value) {\n+      // TODO: Implement update logic\n+      console.log('Updating product:', form)\n+      const index = products.value.findIndex(p => p.id === editingProduct.value?.id)\n+      if (index !== -1) {\n+        products.value[index] = { ...products.value[index], ...form }\n+      }\n+    } else {\n+      // TODO: Implement create logic\n+      console.log('Creating product:', form)\n+      const newProduct = {\n+        id: products.value.length + 1,\n+        ...form\n+      }\n+      products.value.push(newProduct)\n+    }\n+    closeModal()\n+  } catch (error) {\n+    console.error('Error saving product:', error)\n+    alert('Ürün kaydedilirken bir hata oluştu.')\n+  }\n+}\n+\n+const closeModal = () => {\n+  showAddModal.value = false\n+  editingProduct.value = null\n+  Object.assign(form, {\n+    name: '',\n+    description: '',\n+    price: 0,\n+    stock: 0,\n+    image: '',\n+    isActive: true\n+  })\n+}\n+</script>\n+\n+<style scoped>\n+.admin-products {\n+  padding: 1rem;\n+}\n+\n+.page-header {\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+  margin-bottom: 2rem;\n+}\n+\n+.btn-add {\n+  display: flex;\n+  align-items: center;\n+  gap: 0.5rem;\n+  padding: 0.75rem 1.5rem;\n+  background-color: #42b983;\n+  color: white;\n+  border: none;\n+  border-radius: 4px;\n+  cursor: pointer;\n+  transition: background-color 0.2s;\n+}\n+\n+.btn-add:hover {\n+  background-color: #3aa876;\n+}\n+\n+.products-table {\n+  background-color: white;\n+  border-radius: 8px;\n+  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n+  overflow-x: auto;\n+}\n+\n+table {\n+  width: 100%;\n+  border-collapse: collapse;\n+}\n+\n+th, td {\n+  padding: 1rem;\n+  text-align: left;\n+  border-bottom: 1px solid #eee;\n+}\n+\n+th {\n+  background-color: #f8f9fa;\n+  font-weight: 600;\n+  color: #333;\n+}\n+\n+.product-image {\n+  width: 50px;\n+  height: 50px;\n+  object-fit: cover;\n+  border-radius: 4px;\n+}\n+\n+.status {\n+  padding: 0.25rem 0.5rem;\n+  border-radius: 4px;\n+  font-size: 0.875rem;\n+}\n+\n+.status.active {\n+  background-color: #e8f5e9;\n+  color: #2e7d32;\n+}\n+\n+.status.inactive {\n+  background-color: #ffebee;\n+  color: #c62828;\n+}\n+\n+.actions {\n+  display: flex;\n+  gap: 0.5rem;\n+}\n+\n+.btn-edit, .btn-delete {\n+  padding: 0.5rem;\n+  border: none;\n+  border-radius: 4px;\n+  cursor: pointer;\n+  transition: background-color 0.2s;\n+}\n+\n+.btn-edit {\n+  background-color: #2196f3;\n+  color: white;\n+}\n+\n+.btn-delete {\n+  background-color: #f44336;\n+  color: white;\n+}\n+\n+.btn-edit:hover {\n+  background-color: #1976d2;\n+}\n+\n+.btn-delete:hover {\n+  background-color: #d32f2f;\n+}\n+\n+.modal {\n+  position: fixed;\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  bottom: 0;\n+  background-color: rgba(0,0,0,0.5);\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  z-index: 1000;\n+}\n+\n+.modal-content {\n+  background-color: white;\n+  padding: 2rem;\n+  border-radius: 8px;\n+  width: 100%;\n+  max-width: 500px;\n+}\n+\n+.product-form {\n+  display: flex;\n+  flex-direction: column;\n+  gap: 1rem;\n+}\n+\n+.form-group {\n+  display: flex;\n+  flex-direction: column;\n+  gap: 0.5rem;\n+}\n+\n+label {\n+  font-weight: 500;\n+  color: #333;\n+}\n+\n+input, textarea {\n+  padding: 0.75rem;\n+  border: 1px solid #ddd;\n+  border-radius: 4px;\n+  font-size: 1rem;\n+}\n+\n+input:focus, textarea:focus {\n+  outline: none;\n+  border-color: #42b983;\n+}\n+\n+.checkbox-label {\n+  display: flex;\n+  align-items: center;\n+  gap: 0.5rem;\n+  cursor: pointer;\n+}\n+\n+.form-actions {\n+  display: flex;\n+  justify-content: flex-end;\n+  gap: 1rem;\n+  margin-top: 1rem;\n+}\n+\n+.btn-cancel {\n+  padding: 0.75rem 1.5rem;\n+  background-color: #f8f9fa;\n+  border: 1px solid #ddd;\n+  border-radius: 4px;\n+  cursor: pointer;\n+  transition: background-color 0.2s;\n+}\n+\n+.btn-cancel:hover {\n+  background-color: #e9ecef;\n+}\n+\n+.btn-submit {\n+  padding: 0.75rem 1.5rem;\n+  background-color: #42b983;\n+  color: white;\n+  border: none;\n+  border-radius: 4px;\n+  cursor: pointer;\n+  transition: background-color 0.2s;\n+}\n+\n+.btn-submit:hover {\n+  background-color: #3aa876;\n+}\n </style> \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748301426701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,8 +127,9 @@\n </template>\n \n <script setup lang=\"ts\">\n import { ref, reactive } from 'vue'\n+import axios from 'axios'\n \n interface Product {\n   id: number\n   name: string\n@@ -138,23 +139,12 @@\n   image: string\n   isActive: boolean\n }\n \n-const products = ref<Product[]>([\n-  {\n-    id: 1,\n-    name: 'Örnek Ürün 1',\n-    description: 'Ürün açıklaması',\n-    price: 199.99,\n-    stock: 10,\n-    image: '/images/product1.jpg',\n-    isActive: true\n-  },\n-  // Add more sample products\n-])\n-\n+const products = ref<Product[]>([])\n const showAddModal = ref(false)\n const editingProduct = ref<Product | null>(null)\n+const error = ref('')\n \n const form = reactive({\n   name: '',\n   description: '',\n@@ -163,8 +153,19 @@\n   image: '',\n   isActive: true\n })\n \n+const fetchProducts = async () => {\n+  try {\n+    const response = await axios.get('/api/products')\n+    products.value = response.data\n+  } catch (err) {\n+    error.value = 'Ürünler yüklenirken hata oluştu.'\n+  }\n+}\n+\n+fetchProducts()\n+\n const editProduct = (product: Product) => {\n   editingProduct.value = product\n   Object.assign(form, product)\n   showAddModal.value = true\n@@ -184,28 +185,20 @@\n }\n \n const handleSubmit = async () => {\n   try {\n+    error.value = ''\n     if (editingProduct.value) {\n       // TODO: Implement update logic\n-      console.log('Updating product:', form)\n-      const index = products.value.findIndex(p => p.id === editingProduct.value?.id)\n-      if (index !== -1) {\n-        products.value[index] = { ...products.value[index], ...form }\n-      }\n+      // (Aynı şekilde axios ile PUT isteği yapılabilir)\n     } else {\n-      // TODO: Implement create logic\n-      console.log('Creating product:', form)\n-      const newProduct = {\n-        id: products.value.length + 1,\n-        ...form\n-      }\n-      products.value.push(newProduct)\n+      // Backend'e ürün ekle\n+      const response = await axios.post('/api/products', form)\n+      products.value.push(response.data)\n     }\n     closeModal()\n-  } catch (error) {\n-    console.error('Error saving product:', error)\n-    alert('Ürün kaydedilirken bir hata oluştu.')\n+  } catch (err) {\n+    error.value = err.response?.data?.message || 'Ürün kaydedilirken bir hata oluştu.'\n   }\n }\n \n const closeModal = () => {\n@@ -218,8 +211,9 @@\n     stock: 0,\n     image: '',\n     isActive: true\n   })\n+  error.value = ''\n }\n </script>\n \n <style scoped>\n"
                },
                {
                    "date": 1748301510961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,8 @@\n </template>\n \n <script setup lang=\"ts\">\n import { ref, reactive } from 'vue'\n-import axios from 'axios'\n \n interface Product {\n   id: number\n   name: string\n@@ -139,12 +138,23 @@\n   image: string\n   isActive: boolean\n }\n \n-const products = ref<Product[]>([])\n+const products = ref<Product[]>([\n+  {\n+    id: 1,\n+    name: 'Örnek Ürün 1',\n+    description: 'Ürün açıklaması',\n+    price: 199.99,\n+    stock: 10,\n+    image: '/images/product1.jpg',\n+    isActive: true\n+  },\n+  // Add more sample products\n+])\n+\n const showAddModal = ref(false)\n const editingProduct = ref<Product | null>(null)\n-const error = ref('')\n \n const form = reactive({\n   name: '',\n   description: '',\n@@ -153,19 +163,8 @@\n   image: '',\n   isActive: true\n })\n \n-const fetchProducts = async () => {\n-  try {\n-    const response = await axios.get('/api/products')\n-    products.value = response.data\n-  } catch (err) {\n-    error.value = 'Ürünler yüklenirken hata oluştu.'\n-  }\n-}\n-\n-fetchProducts()\n-\n const editProduct = (product: Product) => {\n   editingProduct.value = product\n   Object.assign(form, product)\n   showAddModal.value = true\n@@ -185,20 +184,28 @@\n }\n \n const handleSubmit = async () => {\n   try {\n-    error.value = ''\n     if (editingProduct.value) {\n       // TODO: Implement update logic\n-      // (Aynı şekilde axios ile PUT isteği yapılabilir)\n+      console.log('Updating product:', form)\n+      const index = products.value.findIndex(p => p.id === editingProduct.value?.id)\n+      if (index !== -1) {\n+        products.value[index] = { ...products.value[index], ...form }\n+      }\n     } else {\n-      // Backend'e ürün ekle\n-      const response = await axios.post('/api/products', form)\n-      products.value.push(response.data)\n+      // TODO: Implement create logic\n+      console.log('Creating product:', form)\n+      const newProduct = {\n+        id: products.value.length + 1,\n+        ...form\n+      }\n+      products.value.push(newProduct)\n     }\n     closeModal()\n-  } catch (err) {\n-    error.value = err.response?.data?.message || 'Ürün kaydedilirken bir hata oluştu.'\n+  } catch (error) {\n+    console.error('Error saving product:', error)\n+    alert('Ürün kaydedilirken bir hata oluştu.')\n   }\n }\n \n const closeModal = () => {\n@@ -211,9 +218,8 @@\n     stock: 0,\n     image: '',\n     isActive: true\n   })\n-  error.value = ''\n }\n </script>\n \n <style scoped>\n"
                },
                {
                    "date": 1748301518472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,8 +127,9 @@\n </template>\n \n <script setup lang=\"ts\">\n import { ref, reactive } from 'vue'\n+import axios from 'axios'\n \n interface Product {\n   id: number\n   name: string\n@@ -138,23 +139,12 @@\n   image: string\n   isActive: boolean\n }\n \n-const products = ref<Product[]>([\n-  {\n-    id: 1,\n-    name: 'Örnek Ürün 1',\n-    description: 'Ürün açıklaması',\n-    price: 199.99,\n-    stock: 10,\n-    image: '/images/product1.jpg',\n-    isActive: true\n-  },\n-  // Add more sample products\n-])\n-\n+const products = ref<Product[]>([])\n const showAddModal = ref(false)\n const editingProduct = ref<Product | null>(null)\n+const error = ref('')\n \n const form = reactive({\n   name: '',\n   description: '',\n@@ -163,8 +153,19 @@\n   image: '',\n   isActive: true\n })\n \n+const fetchProducts = async () => {\n+  try {\n+    const response = await axios.get('/api/products')\n+    products.value = response.data\n+  } catch (err) {\n+    error.value = 'Ürünler yüklenirken hata oluştu.'\n+  }\n+}\n+\n+fetchProducts()\n+\n const editProduct = (product: Product) => {\n   editingProduct.value = product\n   Object.assign(form, product)\n   showAddModal.value = true\n@@ -184,28 +185,20 @@\n }\n \n const handleSubmit = async () => {\n   try {\n+    error.value = ''\n     if (editingProduct.value) {\n       // TODO: Implement update logic\n-      console.log('Updating product:', form)\n-      const index = products.value.findIndex(p => p.id === editingProduct.value?.id)\n-      if (index !== -1) {\n-        products.value[index] = { ...products.value[index], ...form }\n-      }\n+      // (Aynı şekilde axios ile PUT isteği yapılabilir)\n     } else {\n-      // TODO: Implement create logic\n-      console.log('Creating product:', form)\n-      const newProduct = {\n-        id: products.value.length + 1,\n-        ...form\n-      }\n-      products.value.push(newProduct)\n+      // Backend'e ürün ekle\n+      const response = await axios.post('/api/products', form)\n+      products.value.push(response.data)\n     }\n     closeModal()\n-  } catch (error) {\n-    console.error('Error saving product:', error)\n-    alert('Ürün kaydedilirken bir hata oluştu.')\n+  } catch (err) {\n+    error.value = err.response?.data?.message || 'Ürün kaydedilirken bir hata oluştu.'\n   }\n }\n \n const closeModal = () => {\n@@ -218,8 +211,9 @@\n     stock: 0,\n     image: '',\n     isActive: true\n   })\n+  error.value = ''\n }\n </script>\n \n <style scoped>\n"
                },
                {
                    "date": 1748301530444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,8 @@\n </template>\n \n <script setup lang=\"ts\">\n import { ref, reactive } from 'vue'\n-import axios from 'axios'\n \n interface Product {\n   id: number\n   name: string\n@@ -139,12 +138,23 @@\n   image: string\n   isActive: boolean\n }\n \n-const products = ref<Product[]>([])\n+const products = ref<Product[]>([\n+  {\n+    id: 1,\n+    name: 'Örnek Ürün 1',\n+    description: 'Ürün açıklaması',\n+    price: 199.99,\n+    stock: 10,\n+    image: '/images/product1.jpg',\n+    isActive: true\n+  },\n+  // Add more sample products\n+])\n+\n const showAddModal = ref(false)\n const editingProduct = ref<Product | null>(null)\n-const error = ref('')\n \n const form = reactive({\n   name: '',\n   description: '',\n@@ -153,19 +163,8 @@\n   image: '',\n   isActive: true\n })\n \n-const fetchProducts = async () => {\n-  try {\n-    const response = await axios.get('/api/products')\n-    products.value = response.data\n-  } catch (err) {\n-    error.value = 'Ürünler yüklenirken hata oluştu.'\n-  }\n-}\n-\n-fetchProducts()\n-\n const editProduct = (product: Product) => {\n   editingProduct.value = product\n   Object.assign(form, product)\n   showAddModal.value = true\n@@ -185,20 +184,28 @@\n }\n \n const handleSubmit = async () => {\n   try {\n-    error.value = ''\n     if (editingProduct.value) {\n       // TODO: Implement update logic\n-      // (Aynı şekilde axios ile PUT isteği yapılabilir)\n+      console.log('Updating product:', form)\n+      const index = products.value.findIndex(p => p.id === editingProduct.value?.id)\n+      if (index !== -1) {\n+        products.value[index] = { ...products.value[index], ...form }\n+      }\n     } else {\n-      // Backend'e ürün ekle\n-      const response = await axios.post('/api/products', form)\n-      products.value.push(response.data)\n+      // TODO: Implement create logic\n+      console.log('Creating product:', form)\n+      const newProduct = {\n+        id: products.value.length + 1,\n+        ...form\n+      }\n+      products.value.push(newProduct)\n     }\n     closeModal()\n-  } catch (err) {\n-    error.value = err.response?.data?.message || 'Ürün kaydedilirken bir hata oluştu.'\n+  } catch (error) {\n+    console.error('Error saving product:', error)\n+    alert('Ürün kaydedilirken bir hata oluştu.')\n   }\n }\n \n const closeModal = () => {\n@@ -211,9 +218,8 @@\n     stock: 0,\n     image: '',\n     isActive: true\n   })\n-  error.value = ''\n }\n </script>\n \n <style scoped>\n"
                },
                {
                    "date": 1748301541740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,8 +127,9 @@\n </template>\n \n <script setup lang=\"ts\">\n import { ref, reactive } from 'vue'\n+import axios from 'axios'\n \n interface Product {\n   id: number\n   name: string\n@@ -138,23 +139,12 @@\n   image: string\n   isActive: boolean\n }\n \n-const products = ref<Product[]>([\n-  {\n-    id: 1,\n-    name: 'Örnek Ürün 1',\n-    description: 'Ürün açıklaması',\n-    price: 199.99,\n-    stock: 10,\n-    image: '/images/product1.jpg',\n-    isActive: true\n-  },\n-  // Add more sample products\n-])\n-\n+const products = ref<Product[]>([])\n const showAddModal = ref(false)\n const editingProduct = ref<Product | null>(null)\n+const error = ref('')\n \n const form = reactive({\n   name: '',\n   description: '',\n@@ -163,8 +153,19 @@\n   image: '',\n   isActive: true\n })\n \n+const fetchProducts = async () => {\n+  try {\n+    const response = await axios.get('/api/products')\n+    products.value = response.data\n+  } catch (err) {\n+    error.value = 'Ürünler yüklenirken hata oluştu.'\n+  }\n+}\n+\n+fetchProducts()\n+\n const editProduct = (product: Product) => {\n   editingProduct.value = product\n   Object.assign(form, product)\n   showAddModal.value = true\n@@ -184,28 +185,20 @@\n }\n \n const handleSubmit = async () => {\n   try {\n+    error.value = ''\n     if (editingProduct.value) {\n       // TODO: Implement update logic\n-      console.log('Updating product:', form)\n-      const index = products.value.findIndex(p => p.id === editingProduct.value?.id)\n-      if (index !== -1) {\n-        products.value[index] = { ...products.value[index], ...form }\n-      }\n+      // (Aynı şekilde axios ile PUT isteği yapılabilir)\n     } else {\n-      // TODO: Implement create logic\n-      console.log('Creating product:', form)\n-      const newProduct = {\n-        id: products.value.length + 1,\n-        ...form\n-      }\n-      products.value.push(newProduct)\n+      // Backend'e ürün ekle\n+      const response = await axios.post('/api/products', form)\n+      products.value.push(response.data)\n     }\n     closeModal()\n-  } catch (error) {\n-    console.error('Error saving product:', error)\n-    alert('Ürün kaydedilirken bir hata oluştu.')\n+  } catch (err) {\n+    error.value = err.response?.data?.message || 'Ürün kaydedilirken bir hata oluştu.'\n   }\n }\n \n const closeModal = () => {\n@@ -218,8 +211,9 @@\n     stock: 0,\n     image: '',\n     isActive: true\n   })\n+  error.value = ''\n }\n </script>\n \n <style scoped>\n"
                },
                {
                    "date": 1748301560800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,8 @@\n </template>\n \n <script setup lang=\"ts\">\n import { ref, reactive } from 'vue'\n-import axios from 'axios'\n \n interface Product {\n   id: number\n   name: string\n@@ -139,12 +138,23 @@\n   image: string\n   isActive: boolean\n }\n \n-const products = ref<Product[]>([])\n+const products = ref<Product[]>([\n+  {\n+    id: 1,\n+    name: 'Örnek Ürün 1',\n+    description: 'Ürün açıklaması',\n+    price: 199.99,\n+    stock: 10,\n+    image: '/images/product1.jpg',\n+    isActive: true\n+  },\n+  // Add more sample products\n+])\n+\n const showAddModal = ref(false)\n const editingProduct = ref<Product | null>(null)\n-const error = ref('')\n \n const form = reactive({\n   name: '',\n   description: '',\n@@ -153,19 +163,8 @@\n   image: '',\n   isActive: true\n })\n \n-const fetchProducts = async () => {\n-  try {\n-    const response = await axios.get('/api/products')\n-    products.value = response.data\n-  } catch (err) {\n-    error.value = 'Ürünler yüklenirken hata oluştu.'\n-  }\n-}\n-\n-fetchProducts()\n-\n const editProduct = (product: Product) => {\n   editingProduct.value = product\n   Object.assign(form, product)\n   showAddModal.value = true\n@@ -185,20 +184,28 @@\n }\n \n const handleSubmit = async () => {\n   try {\n-    error.value = ''\n     if (editingProduct.value) {\n       // TODO: Implement update logic\n-      // (Aynı şekilde axios ile PUT isteği yapılabilir)\n+      console.log('Updating product:', form)\n+      const index = products.value.findIndex(p => p.id === editingProduct.value?.id)\n+      if (index !== -1) {\n+        products.value[index] = { ...products.value[index], ...form }\n+      }\n     } else {\n-      // Backend'e ürün ekle\n-      const response = await axios.post('/api/products', form)\n-      products.value.push(response.data)\n+      // TODO: Implement create logic\n+      console.log('Creating product:', form)\n+      const newProduct = {\n+        id: products.value.length + 1,\n+        ...form\n+      }\n+      products.value.push(newProduct)\n     }\n     closeModal()\n-  } catch (err) {\n-    error.value = err.response?.data?.message || 'Ürün kaydedilirken bir hata oluştu.'\n+  } catch (error) {\n+    console.error('Error saving product:', error)\n+    alert('Ürün kaydedilirken bir hata oluştu.')\n   }\n }\n \n const closeModal = () => {\n@@ -211,9 +218,8 @@\n     stock: 0,\n     image: '',\n     isActive: true\n   })\n-  error.value = ''\n }\n </script>\n \n <style scoped>\n"
                },
                {
                    "date": 1748361980964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,10 @@\n   </div>\n </template>\n \n <script setup lang=\"ts\">\n-import { ref, reactive } from 'vue'\n+import { ref, reactive, onMounted } from 'vue'\n+import axios from 'axios'\n \n interface Product {\n   id: number\n   name: string\n@@ -138,21 +139,17 @@\n   image: string\n   isActive: boolean\n }\n \n-const products = ref<Product[]>([\n-  {\n-    id: 1,\n-    name: 'Örnek Ürün 1',\n-    description: 'Ürün açıklaması',\n-    price: 199.99,\n-    stock: 10,\n-    image: '/images/product1.jpg',\n-    isActive: true\n-  },\n-  // Add more sample products\n-])\n+const products = ref<Product[]>([])\n \n+const fetchProducts = async () => {\n+  const response = await axios.get('/api/products')\n+  products.value = response.data\n+}\n+\n+onMounted(fetchProducts)\n+\n const showAddModal = ref(false)\n const editingProduct = ref<Product | null>(null)\n \n const form = reactive({\n@@ -172,39 +169,26 @@\n \n const deleteProduct = async (id: number) => {\n   if (confirm('Bu ürünü silmek istediğinizden emin misiniz?')) {\n     try {\n-      // TODO: Implement delete logic\n-      console.log('Deleting product:', id)\n-      products.value = products.value.filter(p => p.id !== id)\n+      await axios.delete(`/api/products/${id}`)\n+      await fetchProducts()\n     } catch (error) {\n-      console.error('Error deleting product:', error)\n       alert('Ürün silinirken bir hata oluştu.')\n     }\n   }\n }\n \n const handleSubmit = async () => {\n   try {\n     if (editingProduct.value) {\n-      // TODO: Implement update logic\n-      console.log('Updating product:', form)\n-      const index = products.value.findIndex(p => p.id === editingProduct.value?.id)\n-      if (index !== -1) {\n-        products.value[index] = { ...products.value[index], ...form }\n-      }\n+      await axios.patch(`/api/products/${editingProduct.value.id}`, form)\n     } else {\n-      // TODO: Implement create logic\n-      console.log('Creating product:', form)\n-      const newProduct = {\n-        id: products.value.length + 1,\n-        ...form\n-      }\n-      products.value.push(newProduct)\n+      await axios.post('/api/products', form)\n     }\n+    await fetchProducts()\n     closeModal()\n   } catch (error) {\n-    console.error('Error saving product:', error)\n     alert('Ürün kaydedilirken bir hata oluştu.')\n   }\n }\n \n"
                }
            ],
            "date": 1748300942548,
            "name": "Commit-0",
            "content": "<template>\r\n  <div class=\"admin-products\">\r\n    <div class=\"page-header\">\r\n      <h1>Ürün Yönetimi</h1>\r\n      <button class=\"btn-add\" @click=\"showAddModal = true\">\r\n        <i class=\"fas fa-plus\"></i>\r\n        Yeni Ürün\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"products-table\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>Resim</th>\r\n            <th>Ürün Adı</th>\r\n            <th>Fiyat</th>\r\n            <th>Stok</th>\r\n            <th>Durum</th>\r\n            <th>İşlemler</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"product in products\" :key=\"product.id\">\r\n            <td>{{ product.id }}</td>\r\n            <td>\r\n              <img :src=\"product.image\" :alt=\"product.name\" class=\"product-image\">\r\n            </td>\r\n            <td>{{ product.name }}</td>\r\n            <td>{{ product.price }} TL</td>\r\n            <td>{{ product.stock }}</td>\r\n            <td>\r\n              <span :class=\"['status', product.isActive ? 'active' : 'inactive']\">\r\n                {{ product.isActive ? 'Aktif' : 'Pasif' }}\r\n              </span>\r\n            </td>\r\n            <td>\r\n              <div class=\"actions\">\r\n                <button class=\"btn-edit\" @click=\"editProduct(product)\">\r\n                  <i class=\"fas fa-edit\"></i>\r\n                </button>\r\n                <button class=\"btn-delete\" @click=\"deleteProduct(product.id)\">\r\n                  <i class=\"fas fa-trash\"></i>\r\n                </button>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n    <!-- Add/Edit Product Modal -->\r\n    <div v-if=\"showAddModal\" class=\"modal\">\r\n      <div class=\"modal-content\">\r\n        <h2>{{ editingProduct ? 'Ürün Düzenle' : 'Yeni Ürün' }}</h2>\r\n        <form @submit.prevent=\"handleSubmit\" class=\"product-form\">\r\n          <div class=\"form-group\">\r\n            <label for=\"name\">Ürün Adı</label>\r\n            <input \r\n              type=\"text\" \r\n              id=\"name\" \r\n              v-model=\"form.name\" \r\n              required\r\n            >\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"description\">Açıklama</label>\r\n            <textarea \r\n              id=\"description\" \r\n              v-model=\"form.description\" \r\n              required\r\n              rows=\"3\"\r\n            ></textarea>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"price\">Fiyat</label>\r\n            <input \r\n              type=\"number\" \r\n              id=\"price\" \r\n              v-model=\"form.price\" \r\n              required\r\n              min=\"0\"\r\n              step=\"0.01\"\r\n            >\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"stock\">Stok</label>\r\n            <input \r\n              type=\"number\" \r\n              id=\"stock\" \r\n              v-model=\"form.stock\" \r\n              required\r\n              min=\"0\"\r\n            >\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"image\">Resim URL</label>\r\n            <input \r\n              type=\"url\" \r\n              id=\"image\" \r\n              v-model=\"form.image\" \r\n              required\r\n            >\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label class=\"checkbox-label\">\r\n              <input \r\n                type=\"checkbox\" \r\n                v-model=\"form.isActive\"\r\n              >\r\n              Aktif\r\n            </label>\r\n          </div>\r\n          <div class=\"form-actions\">\r\n            <button type=\"button\" class=\"btn-cancel\" @click=\"closeModal\">\r\n              İptal\r\n            </button>\r\n            <button type=\"submit\" class=\"btn-submit\">\r\n              {{ editingProduct ? 'Güncelle' : 'Ekle' }}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, reactive } from 'vue'\r\nimport axios from 'axios'\r\n\r\ninterface Product {\r\n  id: number\r\n  name: string\r\n  description: string\r\n  price: number\r\n  stock: number\r\n  image: string\r\n  isActive: boolean\r\n}\r\n\r\nconst products = ref<Product[]>([])\r\nconst showAddModal = ref(false)\r\nconst editingProduct = ref<Product | null>(null)\r\nconst error = ref('')\r\n\r\nconst form = reactive({\r\n  name: '',\r\n  description: '',\r\n  price: 0,\r\n  stock: 0,\r\n  image: '',\r\n  isActive: true\r\n})\r\n\r\nconst fetchProducts = async () => {\r\n  try {\r\n    const response = await axios.get('/api/products')\r\n    products.value = response.data\r\n  } catch (err) {\r\n    error.value = 'Ürünler yüklenirken hata oluştu.'\r\n  }\r\n}\r\n\r\nfetchProducts()\r\n\r\nconst editProduct = (product: Product) => {\r\n  editingProduct.value = product\r\n  Object.assign(form, product)\r\n  showAddModal.value = true\r\n}\r\n\r\nconst deleteProduct = async (id: number) => {\r\n  if (confirm('Bu ürünü silmek istediğinizden emin misiniz?')) {\r\n    try {\r\n      // TODO: Implement delete logic\r\n      console.log('Deleting product:', id)\r\n      products.value = products.value.filter(p => p.id !== id)\r\n    } catch (error) {\r\n      console.error('Error deleting product:', error)\r\n      alert('Ürün silinirken bir hata oluştu.')\r\n    }\r\n  }\r\n}\r\n\r\nconst handleSubmit = async () => {\r\n  try {\r\n    error.value = ''\r\n    if (editingProduct.value) {\r\n      // TODO: Implement update logic\r\n      // (Aynı şekilde axios ile PUT isteği yapılabilir)\r\n    } else {\r\n      // Backend'e ürün ekle\r\n      const response = await axios.post('/api/products', form)\r\n      products.value.push(response.data)\r\n    }\r\n    closeModal()\r\n  } catch (err) {\r\n    error.value = err.response?.data?.message || 'Ürün kaydedilirken bir hata oluştu.'\r\n  }\r\n}\r\n\r\nconst closeModal = () => {\r\n  showAddModal.value = false\r\n  editingProduct.value = null\r\n  Object.assign(form, {\r\n    name: '',\r\n    description: '',\r\n    price: 0,\r\n    stock: 0,\r\n    image: '',\r\n    isActive: true\r\n  })\r\n  error.value = ''\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.admin-products {\r\n  padding: 1rem;\r\n}\r\n\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.btn-add {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  padding: 0.75rem 1.5rem;\r\n  background-color: #42b983;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.btn-add:hover {\r\n  background-color: #3aa876;\r\n}\r\n\r\n.products-table {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n  overflow-x: auto;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\nth, td {\r\n  padding: 1rem;\r\n  text-align: left;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\nth {\r\n  background-color: #f8f9fa;\r\n  font-weight: 600;\r\n  color: #333;\r\n}\r\n\r\n.product-image {\r\n  width: 50px;\r\n  height: 50px;\r\n  object-fit: cover;\r\n  border-radius: 4px;\r\n}\r\n\r\n.status {\r\n  padding: 0.25rem 0.5rem;\r\n  border-radius: 4px;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.status.active {\r\n  background-color: #e8f5e9;\r\n  color: #2e7d32;\r\n}\r\n\r\n.status.inactive {\r\n  background-color: #ffebee;\r\n  color: #c62828;\r\n}\r\n\r\n.actions {\r\n  display: flex;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.btn-edit, .btn-delete {\r\n  padding: 0.5rem;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.btn-edit {\r\n  background-color: #2196f3;\r\n  color: white;\r\n}\r\n\r\n.btn-delete {\r\n  background-color: #f44336;\r\n  color: white;\r\n}\r\n\r\n.btn-edit:hover {\r\n  background-color: #1976d2;\r\n}\r\n\r\n.btn-delete:hover {\r\n  background-color: #d32f2f;\r\n}\r\n\r\n.modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0,0,0,0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.modal-content {\r\n  background-color: white;\r\n  padding: 2rem;\r\n  border-radius: 8px;\r\n  width: 100%;\r\n  max-width: 500px;\r\n}\r\n\r\n.product-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.5rem;\r\n}\r\n\r\nlabel {\r\n  font-weight: 500;\r\n  color: #333;\r\n}\r\n\r\ninput, textarea {\r\n  padding: 0.75rem;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n}\r\n\r\ninput:focus, textarea:focus {\r\n  outline: none;\r\n  border-color: #42b983;\r\n}\r\n\r\n.checkbox-label {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  cursor: pointer;\r\n}\r\n\r\n.form-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 1rem;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.btn-cancel {\r\n  padding: 0.75rem 1.5rem;\r\n  background-color: #f8f9fa;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.btn-cancel:hover {\r\n  background-color: #e9ecef;\r\n}\r\n\r\n.btn-submit {\r\n  padding: 0.75rem 1.5rem;\r\n  background-color: #42b983;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.btn-submit:hover {\r\n  background-color: #3aa876;\r\n}\r\n</style> "
        }
    ]
}